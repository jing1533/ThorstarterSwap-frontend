{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getEvmAccounts,\n  Networks,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { evmBlockchains, solanaBlockchain } from 'rango-types';\n\nimport { getNonEvmAccounts, safepal as safepal_instance } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.SAFEPAL;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.ETHEREUM,\n};\n\nexport const getInstance = safepal_instance;\nexport const connect: Connect = async ({ instance, meta }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n\n  let results: ProviderConnectResult[] = [];\n\n  if (ethInstance) {\n    const evmResult = await getEvmAccounts(ethInstance);\n    results.push(evmResult);\n  }\n\n  const nonEvmResults = await getNonEvmAccounts(instance);\n  results = [...results, ...nonEvmResults];\n\n  return results;\n};\n\nexport const subscribe: Subscribe = (options) => {\n  const ethInstance = chooseInstance(\n    options.instance,\n    options.meta,\n    Networks.ETHEREUM\n  );\n\n  if (ethInstance) {\n    subscribeToEvm({ ...options, instance: ethInstance });\n  }\n};\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const solana = solanaBlockchain(allBlockChains);\n  return {\n    name: 'SafePal',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/safepal/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/safepal-extension-wallet/lgmpcpglpngdoalbgeoldeajfclnhafa',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/safepal-extension-wallet/lgmpcpglpngdoalbgeoldeajfclnhafa',\n      FIREFOX:\n        'https://addons.mozilla.org/en-US/firefox/addon/safepal-extension-wallet',\n      DEFAULT: 'https://www.safepal.com/download',\n    },\n    color: '#4A21EF',\n    supportedChains: [...evms, ...solana],\n  };\n};\n", "import {\n  Network,\n  Networks,\n  ProviderConnectResult,\n} from '@rango-dev/wallets-shared';\n\ntype Provider = Map<Network, any>;\n\nexport function safepal() {\n  const instances = new Map();\n  const { isSafePal, safepal, safepalProvider } = window;\n\n  if (!isSafePal) return null;\n\n  if (!!safepal && safepal.isSafePalWallet)\n    instances.set(Networks.SOLANA, safepal);\n\n  if (safepalProvider && safepalProvider)\n    instances.set(Networks.ETHEREUM, safepalProvider);\n\n  if (instances.size === 0) return null;\n\n  return instances;\n}\n\nexport async function getNonEvmAccounts(\n  instances: Provider\n): Promise<ProviderConnectResult[]> {\n  const solanaInstance = instances.get(Networks.SOLANA);\n  const results: ProviderConnectResult[] = [];\n\n  if (solanaInstance) {\n    const solanaResponse = await solanaInstance.connect();\n\n    const solanaAccounts: string = solanaResponse.publicKey.toString();\n\n    results.push({\n      accounts: [solanaAccounts],\n      chainId: Networks.SOLANA,\n    });\n  }\n\n  return results;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "+EAUA,OACE,yBAAAA,EACA,kBAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BACP,OAAS,kBAAAC,EAAgB,oBAAAC,MAAwB,cCnBjD,OAEE,YAAAC,MAEK,4BAIA,SAASC,GAAU,CACxB,IAAMC,EAAY,IAAI,IAChB,CAAE,UAAAC,EAAW,QAAAF,EAAS,gBAAAG,CAAgB,EAAI,OAUhD,MARI,CAACD,IAECF,GAAWA,EAAQ,iBACvBC,EAAU,IAAIG,EAAS,OAAQJ,CAAO,EAEpCG,GAAmBA,GACrBF,EAAU,IAAIG,EAAS,SAAUD,CAAe,EAE9CF,EAAU,OAAS,GAAU,KAE1BA,CACT,CAfgBI,EAAAL,EAAA,WAiBhB,eAAsBM,EACpBL,EACkC,CAClC,IAAMM,EAAiBN,EAAU,IAAIG,EAAS,MAAM,EAC9CI,EAAmC,CAAC,EAE1C,GAAID,EAAgB,CAGlB,IAAME,GAFiB,MAAMF,EAAe,QAAQ,GAEN,UAAU,SAAS,EAEjEC,EAAQ,KAAK,CACX,SAAU,CAACC,CAAc,EACzB,QAASL,EAAS,MACpB,CAAC,EAGH,OAAOI,CACT,CAlBsBH,EAAAC,EAAA,qBCzBtB,OAAS,oBAAAI,MAAwB,wBACjC,OAAS,uBAAAC,MAA2B,2BACpC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,QAAQ,EAC5DC,EAAcF,EAAmBF,EAAUG,EAAS,MAAM,EAC1DE,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBP,CAAW,CAAC,EACpEI,EAAQ,eAAeE,EAAO,OAAQ,IAAIE,EAAoBL,CAAW,CAAC,EACnEC,CACT,CAPwBK,EAAAX,EAAA,cFexB,IAAMY,EAASC,EAAY,QAEdC,EAAS,CACpB,KAAMF,EACN,eAAgBG,EAAS,QAC3B,EAEaC,EAAcC,EACdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,EAAU,KAAAC,CAAK,IAAM,CAC5D,IAAMC,EAAcC,EAAeH,EAAUC,EAAMN,EAAS,QAAQ,EAEhES,EAAmC,CAAC,EAExC,GAAIF,EAAa,CACf,IAAMG,EAAY,MAAMC,EAAeJ,CAAW,EAClDE,EAAQ,KAAKC,CAAS,EAGxB,IAAME,EAAgB,MAAMC,EAAkBR,CAAQ,EACtD,OAAAI,EAAU,CAAC,GAAGA,EAAS,GAAGG,CAAa,EAEhCH,CACT,EAdgC,WAgBnBK,EAAuBV,EAACW,GAAY,CAC/C,IAAMR,EAAcC,EAClBO,EAAQ,SACRA,EAAQ,KACRf,EAAS,QACX,EAEIO,GACFS,EAAe,CAAE,GAAGD,EAAS,SAAUR,CAAY,CAAC,CAExD,EAVoC,aAYvBU,EAA+BC,EAE/BC,EAAuCC,EAEvCC,EAA+CA,EAE/CC,EAAkElB,EAC7EmB,GACG,CACH,IAAMC,EAAOC,EAAeF,CAAc,EACpCG,EAASC,EAAiBJ,CAAc,EAC9C,MAAO,CACL,KAAM,UACN,IAAK,wFACL,YAAa,CACX,OACE,sGACF,MACE,sGACF,QACE,0EACF,QAAS,kCACX,EACA,MAAO,UACP,gBAAiB,CAAC,GAAGC,EAAM,GAAGE,CAAM,CACtC,CACF,EApB+E",
  "names": ["canSwitchNetworkToEvm", "chooseInstance", "getEvmAccounts", "Networks", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "solanaBlockchain", "Networks", "safepal", "instances", "isSafePal", "safepalProvider", "Networks", "__name", "getNonEvmAccounts", "solanaInstance", "results", "solanaAccounts", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "safepal", "connect", "__name", "instance", "meta", "ethInstance", "chooseInstance", "results", "evmResult", "getEvmAccounts", "nonEvmResults", "getNonEvmAccounts", "subscribe", "options", "subscribeToEvm", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "solana", "solanaBlockchain"]
}
