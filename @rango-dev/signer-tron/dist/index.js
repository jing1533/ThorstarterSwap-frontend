var o=Object.defineProperty;var i=(n,r)=>o(n,"name",{value:r,configurable:!0});import{SignerError as t,SignerErrorCode as d}from"rango-types";var e=class{constructor(r){this.provider=r}async signMessage(){throw t.UnimplementedError("signMessage")}async signAndSendTx(r){try{let a=e.buildTx(r),s=await this.provider.tronWeb.trx.sign(a);return{hash:(await this.provider.tronWeb.trx.sendRawTransaction(s))?.transaction?.txID}}catch(a){throw new t(d.SEND_TX_ERROR,void 0,a)}}static buildTx(r){let a={};return r.txID&&(a={...a,txID:r.txID}),r.visible!==void 0&&(a={...a,visible:r.visible}),r.__payload__&&(a={...a,__payload__:r.__payload__}),r.raw_data&&(a={...a,raw_data:r.raw_data}),r.raw_data_hex&&(a={...a,raw_data_hex:r.raw_data_hex}),a}};i(e,"DefaultTronSigner");export{e as DefaultTronSigner};
//# sourceMappingURL=index.js.map
