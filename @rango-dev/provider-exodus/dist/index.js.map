{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getEvmAccounts,\n  Networks,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { isEvmBlockchain, isSolanaBlockchain } from 'rango-types';\n\nimport {\n  exodus_instances,\n  EXODUS_WALLET_SUPPORTED_CHAINS,\n  getSolanaAccounts,\n} from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.EXODUS;\n\nexport const config = {\n  type: WALLET,\n  // TODO: Get from evm networks\n  defaultNetwork: Networks.ETHEREUM,\n};\nexport const getInstance = exodus_instances;\n\nexport const connect: Connect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  let results: ProviderConnectResult[] = [];\n\n  if (evm_instance) {\n    const evm = await getEvmAccounts(evm_instance);\n    results.push(evm);\n  }\n\n  const solanaResults = await getSolanaAccounts(instance);\n  results = [...results, ...solanaResults];\n  return results;\n};\n\nexport const subscribe: Subscribe = (options) => {\n  const ethInstance = chooseInstance(\n    options.instance,\n    options.meta,\n    Networks.ETHEREUM\n  );\n  const solanaInstance = chooseInstance(\n    options.instance,\n    options.meta,\n    Networks.SOLANA\n  );\n  const { connect, updateAccounts, state, updateChainId, meta } = options;\n  ethInstance?.on('accountsChanged', (addresses: string[]) => {\n    const eth_chainId = meta\n      .filter(isEvmBlockchain)\n      .find((blockchain) => blockchain.name === Networks.ETHEREUM)?.chainId;\n    if (state.connected) {\n      if (state.network != Networks.ETHEREUM && eth_chainId) {\n        updateChainId(eth_chainId);\n      }\n      updateAccounts(addresses);\n    }\n  });\n\n  solanaInstance?.on('accountChanged', async (publicKey: string) => {\n    if (state.network != Networks.SOLANA) {\n      updateChainId(meta.filter(isSolanaBlockchain)[0].chainId);\n    }\n    const network = Networks.SOLANA;\n    if (publicKey) {\n      const account = publicKey.toString();\n      updateAccounts([account]);\n    } else {\n      connect(network);\n    }\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = async (options) => {\n  const instance = chooseInstance(\n    options.instance,\n    options.meta,\n    options.network\n  );\n  return switchNetworkForEvm({\n    ...options,\n    instance,\n  });\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => ({\n  name: 'Exodus',\n  img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/exodus/icon.svg',\n  installLink: {\n    CHROME:\n      'https://chrome.google.com/webstore/detail/exodus-web3-wallet/aholpfdialjgjfhomihkjbmgjidlcdno',\n    BRAVE:\n      'https://chrome.google.com/webstore/detail/exodus-web3-wallet/aholpfdialjgjfhomihkjbmgjidlcdno',\n    DEFAULT: 'https://www.exodus.com/',\n  },\n  color: '#8f70fa',\n  supportedChains: allBlockChains.filter((blockchainMeta) =>\n    EXODUS_WALLET_SUPPORTED_CHAINS.includes(blockchainMeta.name as Networks)\n  ),\n});\n", "import { Networks, ProviderConnectResult } from '@rango-dev/wallets-shared';\n\nexport function exodus_instances() {\n  const { exodus } = window;\n\n  if (!exodus) return null;\n\n  const instances = new Map();\n  if (exodus.ethereum) instances.set(Networks.ETHEREUM, exodus.ethereum);\n  if (exodus.solana) instances.set(Networks.SOLANA, exodus.solana);\n  return instances;\n}\n\nexport async function getSolanaAccounts(\n  instance: any\n): Promise<ProviderConnectResult[]> {\n  const solanaInstance = await instance.get(Networks.SOLANA);\n  const results: ProviderConnectResult[] = [];\n\n  if (solanaInstance) {\n    const solanaResponse = await solanaInstance.connect();\n    const account = solanaResponse.publicKey.toString();\n\n    results.push({\n      accounts: account ? [account] : [],\n      chainId: Networks.SOLANA,\n    });\n  }\n\n  return results;\n}\n\nexport const EXODUS_WALLET_SUPPORTED_CHAINS = [\n  Networks.SOLANA,\n  Networks.ETHEREUM,\n  Networks.BSC,\n  Networks.POLYGON,\n  Networks.AVAX_CCHAIN,\n  Networks.BINANCE,\n];\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.COSMOS, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "+EAWA,OACE,0BAAAA,EACA,yBAAAC,EACA,kBAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BACP,OAAS,mBAAAC,EAAiB,sBAAAC,MAA0B,cCpBpD,OAAS,YAAAC,MAAuC,4BAEzC,SAASC,GAAmB,CACjC,GAAM,CAAE,OAAAC,CAAO,EAAI,OAEnB,GAAI,CAACA,EAAQ,OAAO,KAEpB,IAAMC,EAAY,IAAI,IACtB,OAAID,EAAO,UAAUC,EAAU,IAAIC,EAAS,SAAUF,EAAO,QAAQ,EACjEA,EAAO,QAAQC,EAAU,IAAIC,EAAS,OAAQF,EAAO,MAAM,EACxDC,CACT,CATgBE,EAAAJ,EAAA,oBAWhB,eAAsBK,EACpBC,EACkC,CAClC,IAAMC,EAAiB,MAAMD,EAAS,IAAIH,EAAS,MAAM,EACnDK,EAAmC,CAAC,EAE1C,GAAID,EAAgB,CAElB,IAAME,GADiB,MAAMF,EAAe,QAAQ,GACrB,UAAU,SAAS,EAElDC,EAAQ,KAAK,CACX,SAAUC,EAAU,CAACA,CAAO,EAAI,CAAC,EACjC,QAASN,EAAS,MACpB,CAAC,EAGH,OAAOK,CACT,CAjBsBJ,EAAAC,EAAA,qBAmBf,IAAMK,EAAiC,CAC5CP,EAAS,OACTA,EAAS,SACTA,EAAS,IACTA,EAAS,QACTA,EAAS,YACTA,EAAS,OACX,ECvCA,OAAS,oBAAAQ,MAAwB,wBACjC,OAAS,uBAAAC,MAA2B,2BACpC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,QAAQ,EAC5DC,EAAcF,EAAmBF,EAAUG,EAAS,MAAM,EAC1DE,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBP,CAAW,CAAC,EACpEI,EAAQ,eAAeE,EAAO,OAAQ,IAAIE,EAAoBL,CAAW,CAAC,EACnEC,CACT,CAPwBK,EAAAX,EAAA,cFoBxB,IAAMY,EAASC,EAAY,OAEdC,EAAS,CACpB,KAAMF,EAEN,eAAgBG,EAAS,QAC3B,EACaC,EAAcC,EAEdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,EAAU,KAAAC,CAAK,IAAM,CAC5D,IAAMC,EAAeC,EAAeH,EAAUC,EAAMN,EAAS,QAAQ,EACjES,EAAmC,CAAC,EAExC,GAAIF,EAAc,CAChB,IAAMG,EAAM,MAAMC,EAAeJ,CAAY,EAC7CE,EAAQ,KAAKC,CAAG,EAGlB,IAAME,EAAgB,MAAMC,EAAkBR,CAAQ,EACtD,OAAAI,EAAU,CAAC,GAAGA,EAAS,GAAGG,CAAa,EAChCH,CACT,EAZgC,WAcnBK,EAAuBV,EAACW,GAAY,CAC/C,IAAMC,EAAcR,EAClBO,EAAQ,SACRA,EAAQ,KACRf,EAAS,QACX,EACMiB,EAAiBT,EACrBO,EAAQ,SACRA,EAAQ,KACRf,EAAS,MACX,EACM,CAAE,QAAAG,EAAS,eAAAe,EAAgB,MAAAC,EAAO,cAAAC,EAAe,KAAAd,CAAK,EAAIS,EAChEC,GAAa,GAAG,kBAAoBK,GAAwB,CAC1D,IAAMC,EAAchB,EACjB,OAAOiB,CAAe,EACtB,KAAMC,GAAeA,EAAW,OAASxB,EAAS,QAAQ,GAAG,QAC5DmB,EAAM,YACJA,EAAM,SAAWnB,EAAS,UAAYsB,GACxCF,EAAcE,CAAW,EAE3BJ,EAAeG,CAAS,EAE5B,CAAC,EAEDJ,GAAgB,GAAG,iBAAkB,MAAOQ,GAAsB,CAC5DN,EAAM,SAAWnB,EAAS,QAC5BoB,EAAcd,EAAK,OAAOoB,CAAkB,EAAE,CAAC,EAAE,OAAO,EAE1D,IAAMC,EAAU3B,EAAS,OACzB,GAAIyB,EAAW,CACb,IAAMG,EAAUH,EAAU,SAAS,EACnCP,EAAe,CAACU,CAAO,CAAC,OAExBzB,EAAQwB,CAAO,CAEnB,CAAC,CACH,EApCoC,aAsCvBE,GAA+BzB,EAAA,MAAOW,GAAY,CAC7D,IAAMV,EAAWG,EACfO,EAAQ,SACRA,EAAQ,KACRA,EAAQ,OACV,EACA,OAAOe,EAAoB,CACzB,GAAGf,EACH,SAAAV,CACF,CAAC,CACH,EAV4C,iBAY/B0B,GAAuCC,EAEvCC,GAA+CA,EAE/CC,GAAmC9B,EAAA,MAAO,CAAE,SAAAC,EAAU,KAAAC,CAAK,IAAM,CAC5E,IAAMC,EAAeC,EAAeH,EAAUC,EAAMN,EAAS,QAAQ,EACrE,OAAIO,EACK4B,EAAuB,CAAE,SAAU5B,EAAc,KAAAD,CAAK,CAAC,EAEzD,QAAQ,QAAQ,EAAK,CAC9B,EANgD,mBAQnC8B,GAAkEhC,EAC7EiC,IACI,CACJ,KAAM,SACN,IAAK,uFACL,YAAa,CACX,OACE,gGACF,MACE,gGACF,QAAS,yBACX,EACA,MAAO,UACP,gBAAiBA,EAAe,OAAQC,GACtCC,EAA+B,SAASD,EAAe,IAAgB,CACzE,CACF,GAhB+E",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getEvmAccounts", "Networks", "switchNetworkForEvm", "WalletTypes", "isEvmBlockchain", "isSolanaBlockchain", "Networks", "exodus_instances", "exodus", "instances", "Networks", "__name", "getSolanaAccounts", "instance", "solanaInstance", "results", "account", "EXODUS_WALLET_SUPPORTED_CHAINS", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "exodus_instances", "connect", "__name", "instance", "meta", "evm_instance", "chooseInstance", "results", "evm", "getEvmAccounts", "solanaResults", "getSolanaAccounts", "subscribe", "options", "ethInstance", "solanaInstance", "updateAccounts", "state", "updateChainId", "addresses", "eth_chainId", "isEvmBlockchain", "blockchain", "publicKey", "isSolanaBlockchain", "network", "account", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "blockchainMeta", "EXODUS_WALLET_SUPPORTED_CHAINS"]
}
