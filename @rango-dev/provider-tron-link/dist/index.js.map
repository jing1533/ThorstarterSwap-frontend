{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanSwitchNetwork,\n  Connect,\n  Subscribe,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport { Networks, WalletTypes } from '@rango-dev/wallets-shared';\nimport { tronBlockchain } from 'rango-types';\n\nimport { tronLink as tronLink_instance } from './helpers';\nimport signer from './signer';\n\n/*\n * https://docs.tronlink.org/dapp/start-developing\n * https://developers.tron.network/docs/tronlink-events\n */\nconst WALLET = WalletTypes.TRON_LINK;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.TRON,\n};\n\nexport const getInstance = tronLink_instance;\n\nexport const connect: Connect = async ({ instance }) => {\n  let r = undefined;\n  if (!!instance && !instance.ready) {\n    r = await instance.request({ method: 'tron_requestAccounts' });\n    if (!r) {\n      throw new Error('Please unlock your TronLink extension first.');\n    }\n    if (!!r?.code && !!r.message) {\n      throw new Error(r.message);\n    }\n  }\n  const address = instance.tronWeb.address.fromHex(\n    (await instance.tronWeb.trx.getAccount()).address.toString()\n  );\n  // TODO check connected network\n  return { accounts: address ? [address] : [], chainId: Networks.TRON };\n};\n\nexport const subscribe: Subscribe = ({ updateAccounts, disconnect }) => {\n  window.addEventListener('message', (e) => {\n    if (\n      e.data.isTronLink &&\n      e.data.message &&\n      e.data.message.action == 'accountsChanged'\n    ) {\n      const account = e?.data?.message?.data?.address;\n      if (account) {\n        updateAccounts([account]);\n      } else {\n        disconnect();\n      }\n    }\n  });\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = () => false;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const tron = tronBlockchain(allBlockChains);\n  return {\n    name: 'TronLink',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/tronlink/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/tronlink/ibnejdfjmmkpcnlpebklmnkoeoihofec',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/tronlink/ibnejdfjmmkpcnlpebklmnkoeoihofec',\n      DEFAULT: 'https://www.tronlink.org',\n    },\n    color: '#96e7ed',\n    supportedChains: tron,\n  };\n};\n", "export function tronLink() {\n  const { tronLink } = window;\n  if (!!tronLink) return tronLink;\n  return null;\n}\n", "import { DefaultTronSigner } from '@rango-dev/signer-tron';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.TRON, new DefaultTronSigner(provider));\n  return signers;\n}\n"],
  "mappings": "+EAQA,OAAS,YAAAA,EAAU,eAAAC,MAAmB,4BACtC,OAAS,kBAAAC,MAAsB,cCTxB,SAASC,GAAW,CACzB,GAAM,CAAE,SAAAA,CAAS,EAAI,OACrB,OAAMA,GACC,IACT,CAJgBC,EAAAD,EAAA,YCAhB,OAAS,qBAAAE,MAAyB,yBAClC,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,KAAM,IAAIC,EAAkBJ,CAAQ,CAAC,EAC5DC,CACT,CAJwBI,EAAAN,EAAA,cFWxB,IAAMO,EAASC,EAAY,UAEdC,EAAS,CACpB,KAAMF,EACN,eAAgBG,EAAS,IAC3B,EAEaC,EAAcC,EAEdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,CAAS,IAAM,CACtD,IAAIC,EACJ,GAAMD,GAAY,CAACA,EAAS,MAAO,CAEjC,GADAC,EAAI,MAAMD,EAAS,QAAQ,CAAE,OAAQ,sBAAuB,CAAC,EACzD,CAACC,EACH,MAAM,IAAI,MAAM,8CAA8C,EAEhE,GAAMA,GAAG,MAAUA,EAAE,QACnB,MAAM,IAAI,MAAMA,EAAE,OAAO,EAG7B,IAAMC,EAAUF,EAAS,QAAQ,QAAQ,SACtC,MAAMA,EAAS,QAAQ,IAAI,WAAW,GAAG,QAAQ,SAAS,CAC7D,EAEA,MAAO,CAAE,SAAUE,EAAU,CAACA,CAAO,EAAI,CAAC,EAAG,QAASP,EAAS,IAAK,CACtE,EAhBgC,WAkBnBQ,EAAuBJ,EAAA,CAAC,CAAE,eAAAK,EAAgB,WAAAC,CAAW,IAAM,CACtE,OAAO,iBAAiB,UAAYC,GAAM,CACxC,GACEA,EAAE,KAAK,YACPA,EAAE,KAAK,SACPA,EAAE,KAAK,QAAQ,QAAU,kBACzB,CACA,IAAMC,EAAUD,GAAG,MAAM,SAAS,MAAM,QACpCC,EACFH,EAAe,CAACG,CAAO,CAAC,EAExBF,EAAW,EAGjB,CAAC,CACH,EAfoC,aAiBvBG,EAAuCT,EAAA,IAAM,GAAN,sBAEvCU,EAA+CA,EAE/CC,EAAkEX,EAC7EY,GACG,CACH,IAAMC,EAAOC,EAAeF,CAAc,EAC1C,MAAO,CACL,KAAM,WACN,IAAK,yFACL,YAAa,CACX,OACE,sFACF,MACE,sFACF,QAAS,0BACX,EACA,MAAO,UACP,gBAAiBC,CACnB,CACF,EAjB+E",
  "names": ["Networks", "WalletTypes", "tronBlockchain", "tronLink", "__name", "DefaultTronSigner", "DefaultSignerFactory", "TxType", "getSigners", "provider", "signers", "DefaultSignerFactory", "TxType", "DefaultTronSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "tronLink", "connect", "__name", "instance", "r", "address", "subscribe", "updateAccounts", "disconnect", "e", "account", "canSwitchNetworkTo", "getSigners", "getWalletInfo", "allBlockChains", "tron", "tronBlockchain"]
}
