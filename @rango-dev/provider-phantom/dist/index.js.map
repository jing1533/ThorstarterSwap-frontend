{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  Subscribe,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  getSolanaAccounts,\n  Networks,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { solanaBlockchain } from 'rango-types';\n\nimport { phantom as phantom_instance } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.PHANTOM;\n\nexport const config = {\n  type: WALLET,\n};\n\nexport const getInstance = phantom_instance;\nexport const connect: Connect = getSolanaAccounts;\n\nexport const subscribe: Subscribe = ({ instance, updateAccounts, connect }) => {\n  instance?.on('accountChanged', async (publicKey: string) => {\n    const network = Networks.SOLANA;\n    if (publicKey) {\n      const account = publicKey.toString();\n      updateAccounts([account]);\n    } else {\n      connect(network);\n    }\n  });\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = () => false;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance }) => {\n  try {\n    const result = await instance.connect({ onlyIfTrusted: true });\n    return !!result;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const solana = solanaBlockchain(allBlockChains);\n  return {\n    name: 'Phantom',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/phantom/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa',\n\n      DEFAULT: 'https://phantom.app/',\n    },\n    color: '#4d40c6',\n    supportedChains: solana,\n  };\n};\n", "export function phantom() {\n  if ('phantom' in window) {\n    const instance = window.phantom?.solana;\n\n    if (instance?.isPhantom) {\n      return instance;\n    }\n  }\n\n  return null;\n}\n", "import { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "+EASA,OACE,qBAAAA,EACA,YAAAC,EACA,eAAAC,MACK,4BACP,OAAS,oBAAAC,MAAwB,cCd1B,SAASC,GAAU,CACxB,GAAI,YAAa,OAAQ,CACvB,IAAMC,EAAW,OAAO,SAAS,OAEjC,GAAIA,GAAU,UACZ,OAAOA,EAIX,OAAO,IACT,CAVgBC,EAAAF,EAAA,WCAhB,OAAS,uBAAAG,MAA2B,2BACpC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,MAAM,EAC1DC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,OAAQ,IAAIC,EAAoBN,CAAW,CAAC,EACnEG,CACT,CALwBI,EAAAT,EAAA,cFWxB,IAAMU,EAASC,EAAY,QAEdC,EAAS,CACpB,KAAMF,CACR,EAEaG,EAAcC,EACdC,EAAmBC,EAEnBC,EAAuBC,EAAA,CAAC,CAAE,SAAAC,EAAU,eAAAC,EAAgB,QAAAL,CAAQ,IAAM,CAC7EI,GAAU,GAAG,iBAAkB,MAAOE,GAAsB,CAC1D,IAAMC,EAAUC,EAAS,OACzB,GAAIF,EAAW,CACb,IAAMG,EAAUH,EAAU,SAAS,EACnCD,EAAe,CAACI,CAAO,CAAC,OAExBT,EAAQO,CAAO,CAEnB,CAAC,CACH,EAVoC,aAYvBG,EAAuCP,EAAA,IAAM,GAAN,sBAEvCQ,EAA+CA,EAE/CC,EAAmCT,EAAA,MAAO,CAAE,SAAAC,CAAS,IAAM,CACtE,GAAI,CAEF,MAAO,CAAC,CADO,MAAMA,EAAS,QAAQ,CAAE,cAAe,EAAK,CAAC,CAE/D,MAAE,CACA,MAAO,EACT,CACF,EAPgD,mBASnCS,EAAkEV,EAC7EW,GACG,CACH,IAAMC,EAASC,EAAiBF,CAAc,EAC9C,MAAO,CACL,KAAM,UACN,IAAK,wFACL,YAAa,CACX,OACE,qFAEF,QAAS,sBACX,EACA,MAAO,UACP,gBAAiBC,CACnB,CACF,EAhB+E",
  "names": ["getSolanaAccounts", "Networks", "WalletTypes", "solanaBlockchain", "phantom", "instance", "__name", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "solProvider", "getNetworkInstance", "Networks", "signers", "DefaultSignerFactory", "TxType", "DefaultSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "getInstance", "phantom", "connect", "getSolanaAccounts", "subscribe", "__name", "instance", "updateAccounts", "publicKey", "network", "Networks", "account", "canSwitchNetworkTo", "getSigners", "canEagerConnect", "getWalletInfo", "allBlockChains", "solana", "solanaBlockchain"]
}
