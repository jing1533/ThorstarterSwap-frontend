{
  "version": 3,
  "sources": ["../src/index.ts", "../src/constants.ts", "../src/helpers.ts", "../src/signer.ts", "../src/cosmos-signer.ts", "../src/utxo-signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getBlockChainNameFromId,\n  getEvmAccounts,\n  getSolanaAccounts,\n  Networks,\n  switchNetworkForEvm,\n  WalletTypes,\n  XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS,\n} from '@rango-dev/wallets-shared';\n\nimport { SUPPORTED_ETH_CHAINS } from './constants';\nimport { getNonEvmAccounts, xdefi as xdefi_instances } from './helpers';\nimport signer from './signer';\n\nconst DEFAULT_NETWORK = Networks.ETHEREUM;\nconst WALLET = WalletTypes.XDEFI;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: DEFAULT_NETWORK,\n};\n\nexport const getInstance = xdefi_instances;\n\nexport const connect: Connect = async ({ instance, meta }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const solInstance = chooseInstance(instance, meta, Networks.SOLANA);\n  if (!ethInstance || !ethInstance.__XDEFI) {\n    throw new Error(\"Please 'Prioritise' XDEFI and refresh the page.\");\n  }\n\n  const evmResult = await getEvmAccounts(ethInstance);\n  const nonEvmResults = await getNonEvmAccounts(instance);\n  const solanaAccounts = await getSolanaAccounts({\n    instance: solInstance,\n    meta,\n  });\n\n  return [evmResult, ...nonEvmResults, solanaAccounts as ProviderConnectResult];\n};\n\nexport const subscribe: Subscribe = ({\n  instance,\n  meta,\n  updateChainId,\n  connect,\n}) => {\n  const eth = chooseInstance(instance, meta, Networks.ETHEREUM);\n  eth?.on('chainChanged', (chainId: string) => {\n    const network = getBlockChainNameFromId(chainId, meta) || Networks.Unknown;\n    /*\n     *TODO:\n     *We are calling `connect` here because signer can't detect\n     *currect network, I guess the bug is in our signer and it\n     *gets the wrong network by calling a wrong method or something.\n     *Anyways, this works for now, maybe we can reconsider it in future\n     *Whenever we refactored the signer code as well.\n     */\n\n    /*\n     *  we need to update `network` first, if not, it will goes through\n     * the switching network and will open unneccessary pop ups.\n     */\n    updateChainId(chainId);\n    connect(network);\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => ({\n  name: 'XDefi',\n  img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/xdefi/icon.svg',\n  installLink: {\n    CHROME:\n      'https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf',\n    BRAVE:\n      'https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf',\n    DEFAULT: 'https://xdefi.io/',\n  },\n  color: '#0646c7',\n  supportedChains: allBlockChains.filter((blockchainMeta) =>\n    [\n      ...SUPPORTED_ETH_CHAINS,\n      ...XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS,\n      Networks.SOLANA,\n    ].includes(blockchainMeta.name as Networks)\n  ),\n});\n", "import {\n  Networks,\n  XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS,\n} from '@rango-dev/wallets-shared';\n\nexport const SUPPORTED_NETWORKS = XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS;\nexport const SUPPORTED_ETH_CHAINS = [\n  Networks.POLYGON,\n  Networks.ETHEREUM,\n  Networks.BSC,\n  Networks.AVAX_CCHAIN,\n  Networks.FANTOM,\n  Networks.ARBITRUM,\n];\n", "import {\n  Network,\n  Networks,\n  ProviderConnectResult,\n} from '@rango-dev/wallets-shared';\nimport { SUPPORTED_ETH_CHAINS, SUPPORTED_NETWORKS } from './constants';\nimport { SignerError, SignerErrorCode } from 'rango-types';\n\ntype Provider = Map<Network, any>;\n\nexport function xdefi() {\n  const { xfi, ethereum } = window;\n\n  if (!xfi) return null;\n\n  const instances = new Map();\n  if (xfi.bitcoin) instances.set(Networks.BTC, xfi.bitcoin);\n  if (xfi.litecoin) instances.set(Networks.LTC, xfi.litecoin);\n  if (xfi.thorchain) instances.set(Networks.THORCHAIN, xfi.thorchain);\n  if (xfi.bitcoincash) instances.set(Networks.BCH, xfi.bitcoincash);\n  if (xfi.binance) instances.set(Networks.BINANCE, xfi.binance);\n  if (ethereum?.__XDEFI) instances.set(Networks.ETHEREUM, ethereum);\n  if (xfi.dogecoin) instances.set(Networks.DOGE, xfi.dogecoin);\n  if (xfi.solana) instances.set(Networks.SOLANA, xfi.solana);\n\n  return instances;\n}\n\nexport function getEthChainsInstance(netowrk: Network | null): Network | null {\n  if (!netowrk) return null;\n  return SUPPORTED_ETH_CHAINS.includes(netowrk as Networks)\n    ? Networks.ETHEREUM\n    : null;\n}\n\nexport async function getNonEvmAccounts(\n  instances: Provider\n): Promise<ProviderConnectResult[]> {\n  const nonEvmNetworks = SUPPORTED_NETWORKS.filter(\n    (net: Network) => net !== Networks.ETHEREUM\n  );\n  const promises: Promise<ProviderConnectResult>[] = nonEvmNetworks.map(\n    (network: Network) => {\n      return new Promise((resolve, reject) => {\n        const instance = instances.get(network);\n        instance.request(\n          {\n            method: 'request_accounts',\n            params: [],\n          },\n          (error: any, accounts: any) => {\n            if (error) {\n              reject(error);\n              return error;\n            }\n\n            const result = {\n              accounts,\n              chainId: network,\n            };\n\n            resolve(result);\n          }\n        );\n      });\n    }\n  );\n\n  const results = await Promise.all(promises);\n\n  return results;\n}\n\nexport function xdefiTransfer(\n  blockchain: string,\n  ticker: string,\n  from: string,\n  amount: string,\n  decimals: number,\n  recipientAddress: string | null,\n  provider: any,\n  method: string,\n  memo: string | null\n): Promise<string> {\n  return new Promise(function (resolve, reject) {\n    const params = {\n      asset: { chain: blockchain, symbol: ticker, ticker: ticker },\n      from: from,\n      amount: { amount: amount, decimals: decimals },\n      memo: memo,\n      // recipient: to,\n    } as any;\n    if (recipientAddress) params.recipient = recipientAddress;\n\n    provider.request(\n      { method: method, params: [params] },\n      (error: any, result: any) => {\n        if (error)\n          reject(\n            new SignerError(SignerErrorCode.SEND_TX_ERROR, undefined, error)\n          );\n        else resolve(result);\n      }\n    );\n  });\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\nimport { CustomCosmosSigner } from './cosmos-signer';\nimport { CustomTransferSigner } from './utxo-signer';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const binanceProvider = getNetworkInstance(provider, Networks.BINANCE);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  signers.registerSigner(\n    TxType.COSMOS,\n    new CustomCosmosSigner(binanceProvider)\n  );\n  // passed provider for transfer as it comprises several signers\n  signers.registerSigner(TxType.TRANSFER, new CustomTransferSigner(provider));\n  return signers;\n}\n", "import { CosmosTransaction, GenericSigner, SignerError } from 'rango-types';\nimport { xdefiTransfer } from './helpers';\n\n// TODO - replace with real type\n// tslint:disable-next-line: no-any\ntype CosmosExternalProvider = any;\n\nexport class CustomCosmosSigner implements GenericSigner<CosmosTransaction> {\n  private provider: CosmosExternalProvider;\n  constructor(provider: CosmosExternalProvider) {\n    this.provider = provider;\n  }\n\n  async signMessage(): Promise<string> {\n    throw SignerError.UnimplementedError('signMessage');\n  }\n\n  async signAndSendTx(tx: CosmosTransaction): Promise<{ hash: string }> {\n    if (tx.rawTransfer === null)\n      throw SignerError.AssertionFailed('rawTransfer obj can not be null');\n\n    const from = tx.fromWalletAddress;\n    const { method, memo, recipient, decimals, amount, asset } = tx.rawTransfer;\n    const blockchain = tx.blockChain;\n    const hash = await xdefiTransfer(\n      blockchain,\n      asset.ticker,\n      from,\n      amount,\n      decimals,\n      recipient,\n      this.provider,\n      method,\n      memo\n    );\n    return { hash };\n  }\n}\n", "import { GenericSigner, SignerError, Transfer } from 'rango-types';\nimport { xdefiTransfer } from './helpers';\nimport {\n  XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS,\n  getNetworkInstance,\n} from '@rango-dev/wallets-shared';\nimport { Networks } from '@rango-dev/wallets-shared';\n\n// TODO - replace with real type\n// tslint:disable-next-line: no-any\ntype TransferExternalProvider = any;\n\nexport class CustomTransferSigner implements GenericSigner<Transfer> {\n  private provider: TransferExternalProvider;\n  constructor(provider: TransferExternalProvider) {\n    this.provider = provider;\n  }\n\n  async signMessage(): Promise<string> {\n    throw SignerError.UnimplementedError('signMessage');\n  }\n\n  async signAndSendTx(tx: Transfer): Promise<{ hash: string }> {\n    const { blockchain } = tx.asset;\n\n    // Everything except ETH\n    if (!XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS.includes(blockchain as Networks))\n      throw new Error(\n        `blockchain: ${blockchain} transfer not implemented yet.`\n      );\n    const transferProvider = getNetworkInstance(this.provider, blockchain);\n\n    const {\n      method,\n      memo,\n      recipientAddress,\n      decimals,\n      amount,\n      fromWalletAddress: from,\n      asset,\n    } = tx;\n\n    const hash = await xdefiTransfer(\n      blockchain,\n      asset.ticker,\n      from,\n      amount,\n      decimals,\n      recipientAddress,\n      transferProvider,\n      method,\n      memo\n    );\n    return { hash };\n  }\n}\n"],
  "mappings": "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",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getBlockChainNameFromId", "getEvmAccounts", "getSolanaAccounts", "Networks", "switchNetworkForEvm", "WalletTypes", "XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS", "Networks", "XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS", "SUPPORTED_NETWORKS", "SUPPORTED_ETH_CHAINS", "Networks", "SignerError", "SignerErrorCode", "xdefi", "xfi", "ethereum", "instances", "Networks", "__name", "getNonEvmAccounts", "instances", "promises", "SUPPORTED_NETWORKS", "net", "Networks", "network", "resolve", "reject", "error", "accounts", "__name", "xdefiTransfer", "blockchain", "ticker", "from", "amount", "decimals", "recipientAddress", "provider", "method", "memo", "params", "result", "SignerError", "SignerErrorCode", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "SignerError", "CustomCosmosSigner", "provider", "SignerError", "tx", "from", "method", "memo", "recipient", "decimals", "amount", "asset", "blockchain", "xdefiTransfer", "__name", "SignerError", "XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS", "getNetworkInstance", "CustomTransferSigner", "provider", "SignerError", "tx", "blockchain", "XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS", "transferProvider", "getNetworkInstance", "method", "memo", "recipientAddress", "decimals", "amount", "from", "asset", "xdefiTransfer", "__name", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "binanceProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "CustomCosmosSigner", "CustomTransferSigner", "__name", "DEFAULT_NETWORK", "Networks", "WALLET", "WalletTypes", "config", "getInstance", "xdefi", "connect", "__name", "instance", "meta", "ethInstance", "chooseInstance", "solInstance", "evmResult", "getEvmAccounts", "nonEvmResults", "getNonEvmAccounts", "solanaAccounts", "getSolanaAccounts", "subscribe", "updateChainId", "chainId", "network", "getBlockChainNameFromId", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "evm_instance", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "blockchainMeta", "SUPPORTED_ETH_CHAINS", "XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS"]
}
