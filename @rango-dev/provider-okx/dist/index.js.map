{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getEvmAccounts,\n  Networks,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { isEvmBlockchain } from 'rango-types';\n\nimport {\n  getSolanaAccounts,\n  okx_instance,\n  OKX_WALLET_SUPPORTED_CHAINS,\n} from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.OKX;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.ETHEREUM,\n};\n\nexport const getInstance = okx_instance;\nexport const connect: Connect = async ({ instance, meta }) => {\n  let results: ProviderConnectResult[] = [];\n\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n\n  if (evm_instance) {\n    const evm = await getEvmAccounts(evm_instance);\n    results.push(evm);\n  }\n\n  const solanaResults = await getSolanaAccounts(instance);\n\n  results = [...results, ...solanaResults];\n\n  return results;\n};\n\nexport const subscribe: Subscribe = ({ instance, updateAccounts, meta }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n\n  ethInstance?.on('accountsChanged', async (addresses: string[]) => {\n    const eth_chainId = meta\n      .filter(isEvmBlockchain)\n      .find((blockchain) => blockchain.name === Networks.ETHEREUM)?.chainId;\n\n    updateAccounts(addresses, eth_chainId);\n    const [{ accounts, chainId }] = await getSolanaAccounts(instance);\n    updateAccounts(accounts, chainId);\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = async (options) => {\n  const instance = chooseInstance(\n    options.instance,\n    options.meta,\n    options.network\n  );\n  return switchNetworkForEvm({\n    ...options,\n    instance,\n  });\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => ({\n  name: 'OKX',\n  img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/okx/icon.svg',\n  installLink: {\n    CHROME:\n      'https://chrome.google.com/webstore/detail/okx-wallet/mcohilncbfahbmgdjkbpemcciiolgcge',\n    BRAVE:\n      'https://chrome.google.com/webstore/detail/okx-wallet/mcohilncbfahbmgdjkbpemcciiolgcge',\n    FIREFOX: 'https://addons.mozilla.org/en-US/firefox/addon/okexwallet',\n    DEFAULT: 'https://www.okx.com/web3',\n  },\n  color: 'white',\n  supportedChains: allBlockChains.filter((blockchainMeta) =>\n    OKX_WALLET_SUPPORTED_CHAINS.includes(blockchainMeta.name as Networks)\n  ),\n});\n", "import { Networks, ProviderConnectResult } from '@rango-dev/wallets-shared';\n\nexport function okx_instance() {\n  const { okxwallet } = window;\n  if (!okxwallet) return null;\n  const instances = new Map();\n  if (okxwallet) instances.set(Networks.ETHEREUM, okxwallet);\n  if (okxwallet.solana) instances.set(Networks.SOLANA, okxwallet.solana);\n\n  return instances;\n}\n\nexport async function getSolanaAccounts(\n  instance: any\n): Promise<ProviderConnectResult[]> {\n  const solanaInstance = await instance.get(Networks.SOLANA);\n  const results: ProviderConnectResult[] = [];\n\n  if (solanaInstance) {\n    const solanaResponse = await solanaInstance.connect();\n    const account = solanaResponse.publicKey.toString();\n\n    results.push({\n      accounts: account ? [account] : [],\n      chainId: Networks.SOLANA,\n    });\n  }\n\n  return results;\n}\n\nexport const OKX_WALLET_SUPPORTED_CHAINS = [\n  Networks.ETHEREUM,\n  Networks.BTC,\n  Networks.BSC,\n  Networks.TRON,\n  Networks.SOLANA,\n  Networks.POLYGON,\n  Networks.FANTOM,\n  Networks.ARBITRUM,\n  Networks.OPTIMISM,\n  Networks.CRONOS,\n  Networks.BOBA,\n  Networks.GNOSIS,\n  Networks.MOONBEAM,\n  Networks.MOONRIVER,\n  Networks.HARMONY,\n  Networks.LTC,\n  Networks.AVAX_CCHAIN,\n];\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "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",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getEvmAccounts", "Networks", "switchNetworkForEvm", "WalletTypes", "isEvmBlockchain", "Networks", "okx_instance", "okxwallet", "instances", "Networks", "__name", "getSolanaAccounts", "instance", "solanaInstance", "results", "account", "OKX_WALLET_SUPPORTED_CHAINS", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "okx_instance", "connect", "__name", "instance", "meta", "results", "evm_instance", "chooseInstance", "evm", "getEvmAccounts", "solanaResults", "getSolanaAccounts", "subscribe", "updateAccounts", "addresses", "eth_chainId", "isEvmBlockchain", "blockchain", "accounts", "chainId", "switchNetwork", "options", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "blockchainMeta", "OKX_WALLET_SUPPORTED_CHAINS"]
}
