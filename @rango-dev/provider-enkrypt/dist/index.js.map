{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  getEvmAccounts,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { evmBlockchains } from 'rango-types';\n\nimport { enkrypt as enkrypt_instance } from './helpers';\nimport signer from './signer';\n\nexport const getInstance = enkrypt_instance;\n\nconst WALLET = WalletTypes.ENKRYPT;\n\nexport const config = {\n  type: WALLET,\n};\n\nexport const connect: Connect = async ({ instance }) => {\n  const result = await getEvmAccounts(instance);\n  const { chainId } = result;\n  let { accounts } = result;\n  if (accounts.length > 1) {\n    accounts = [instance.selectedAddress];\n  }\n\n  return {\n    accounts,\n    chainId,\n  };\n};\n\nexport const subscribe: Subscribe = subscribeToEvm;\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = canEagerlyConnectToEvm;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  return {\n    name: 'Enkrypt',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/enkrypt/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/enkrypt/kkpllkodjeloidieedojogacfhpaihoh',\n      FIREFOX: 'https://addons.mozilla.org/en-US/firefox/addon/enkrypt/',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/enkrypt/kkpllkodjeloidieedojogacfhpaihoh',\n      EDGE: 'https://microsoftedge.microsoft.com/addons/detail/enkrypt-ethereum-polkad/gfenajajnjjmmdojhdjmnngomkhlnfjl',\n\n      DEFAULT: 'https://www.enkrypt.com/',\n    },\n    color: '#fff',\n    supportedChains: evms,\n  };\n};\n", "export function enkrypt() {\n  const { enkrypt } = window;\n  const ethereum = enkrypt?.providers?.ethereum;\n  if (!ethereum) return null;\n  return ethereum;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSignerFactory } from 'rango-types';\nimport { SignerFactory, TransactionType as TxType } from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(provider));\n  return signers;\n}\n"],
  "mappings": "+EAUA,OACE,0BAAAA,EACA,yBAAAC,EACA,kBAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BACP,OAAS,kBAAAC,MAAsB,cClBxB,SAASC,GAAU,CACxB,GAAM,CAAE,QAAAA,CAAQ,EAAI,OACdC,EAAWD,GAAS,WAAW,SACrC,OAAKC,GAAiB,IAExB,CALgBC,EAAAF,EAAA,WCAhB,OAAS,oBAAAG,MAAwB,wBACjC,OAAS,wBAAAC,MAA4B,cACrC,OAAwB,mBAAmBC,MAAc,cAE1C,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBJ,CAAQ,CAAC,EAC1DC,CACT,CAJwBI,EAAAN,EAAA,cFmBjB,IAAMO,EAAcC,EAErBC,EAASC,EAAY,QAEdC,EAAS,CACpB,KAAMF,CACR,EAEaG,EAAmBC,EAAA,MAAO,CAAE,SAAAC,CAAS,IAAM,CACtD,IAAMC,EAAS,MAAMC,EAAeF,CAAQ,EACtC,CAAE,QAAAG,CAAQ,EAAIF,EAChB,CAAE,SAAAG,CAAS,EAAIH,EACnB,OAAIG,EAAS,OAAS,IACpBA,EAAW,CAACJ,EAAS,eAAe,GAG/B,CACL,SAAAI,EACA,QAAAD,CACF,CACF,EAZgC,WAcnBE,EAAuBC,EAEvBC,EAA+BC,EAE/BC,EAAuCC,EAEvCC,EAA+CA,EAE/CC,EAAmCC,EAEnCC,EAAkEf,EAC7EgB,GACG,CACH,IAAMC,EAAOC,EAAeF,CAAc,EAC1C,MAAO,CACL,KAAM,UACN,IAAK,wFACL,YAAa,CACX,OACE,qFACF,QAAS,0DACT,MACE,qFACF,KAAM,6GAEN,QAAS,0BACX,EACA,MAAO,OACP,gBAAiBC,CACnB,CACF,EApB+E",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "getEvmAccounts", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "enkrypt", "ethereum", "__name", "DefaultEvmSigner", "DefaultSignerFactory", "TxType", "getSigners", "provider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "__name", "getInstance", "enkrypt", "WALLET", "WalletTypes", "config", "connect", "__name", "instance", "result", "getEvmAccounts", "chainId", "accounts", "subscribe", "subscribeToEvm", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains"]
}
