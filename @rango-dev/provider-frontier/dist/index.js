var y=Object.defineProperty;var r=(t,n)=>y(t,"name",{value:n,configurable:!0});import{canEagerlyConnectToEvm as v,canSwitchNetworkToEvm as R,chooseInstance as s,getEvmAccounts as T,Networks as c,switchNetworkForEvm as I,WalletTypes as x}from"@rango-dev/wallets-shared";import{evmBlockchains as M,isEvmBlockchain as b,isSolanaBlockchain as L,solanaBlockchain as O}from"rango-types";import{Networks as u}from"@rango-dev/wallets-shared";function w(){let{frontier:t}=window;if(!t)return null;let n=new Map;return t?.ethereum&&n.set(u.ETHEREUM,t?.ethereum),t?.solana&&n.set(u.SOLANA,t?.solana),n}r(w,"frontier");async function E(t){let n=await t.get(u.SOLANA),e=[];if(n){await n.connect();let o=n.publicKey.toString();e.push({accounts:o?[o]:[],chainId:u.SOLANA})}return e}r(E,"getSolanaAccounts");import{DefaultEvmSigner as A}from"@rango-dev/signer-evm";import{DefaultSolanaSigner as C}from"@rango-dev/signer-solana";import{Networks as S,getNetworkInstance as d}from"@rango-dev/wallets-shared";import{DefaultSignerFactory as N,TransactionType as k}from"rango-types";function g(t){let n=d(t,S.ETHEREUM),e=d(t,S.SOLANA),o=new N;return o.registerSigner(k.EVM,new A(n)),o.registerSigner(k.COSMOS,new C(e)),o}r(g,"getSigners");var F=x.FRONTIER,Y={type:F,defaultNetwork:c.ETHEREUM},Z=w,$=r(async({instance:t,meta:n})=>{let e=s(t,n,c.ETHEREUM),o=[];if(e){let a=await T(e);o.push({chainId:a?.chainId,accounts:a?.accounts.length>0?[a.accounts[0]]:[]})}let i=await E(t);return o=[...o,...i],o},"connect"),tt=r(t=>{let n=s(t.instance,t.meta,c.ETHEREUM),e=s(t.instance,t.meta,c.SOLANA),{connect:o,updateAccounts:i,state:a,updateChainId:h,meta:p}=t;n?.on("accountsChanged",l=>{let f=p.filter(b).find(m=>m.name===c.ETHEREUM)?.chainId;a.connected&&(a.network!=c.ETHEREUM&&f&&h(f),i(l))}),e?.on("accountChanged",async l=>{a.network!=c.SOLANA&&h(p.filter(L)[0].chainId);let f=c.SOLANA;if(l){let m=l.toString();i([m])}else o(f)})},"subscribe"),nt=r(async t=>{let n=s(t.instance,t.meta,t.network);return I({...t,instance:n})},"switchNetwork"),et=R,ot=g,rt=r(async({instance:t,meta:n})=>{let e=s(t,n,c.ETHEREUM);return e?v({instance:e,meta:n}):Promise.resolve(!1)},"canEagerConnect"),ct=r(t=>{let n=M(t),e=O(t);return{name:"Frontier",img:"https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/frontier/icon.svg",installLink:{CHROME:"https://chrome.google.com/webstore/detail/frontier-wallet/kppfdiipphfccemcignhifpjkapfbihd",BRAVE:"https://chrome.google.com/webstore/detail/frontier-wallet/kppfdiipphfccemcignhifpjkapfbihd",DEFAULT:"https://www.frontier.xyz"},color:"#4d40c6",supportedChains:[...n,...e]}},"getWalletInfo");export{rt as canEagerConnect,et as canSwitchNetworkTo,Y as config,$ as connect,Z as getInstance,ot as getSigners,ct as getWalletInfo,tt as subscribe,nt as switchNetwork};
//# sourceMappingURL=index.js.map
