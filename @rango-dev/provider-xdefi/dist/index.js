var _=Object.defineProperty;var o=(e,r)=>_(e,"name",{value:r,configurable:!0});import{canEagerlyConnectToEvm as B,canSwitchNetworkToEvm as X,chooseInstance as T,getBlockChainNameFromId as G,getEvmAccounts as V,getSolanaAccounts as q,Networks as f,switchNetworkForEvm as K,WalletTypes as j,XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS as Y}from"@rango-dev/wallets-shared";import{Networks as g,XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS as b}from"@rango-dev/wallets-shared";var v=b,S=[g.POLYGON,g.ETHEREUM,g.BSC,g.AVAX_CCHAIN,g.FANTOM,g.ARBITRUM];import{Networks as m}from"@rango-dev/wallets-shared";import{SignerError as O,SignerErrorCode as D}from"rango-types";function R(){let{xfi:e,ethereum:r}=window;if(!e)return null;let n=new Map;return e.bitcoin&&n.set(m.BTC,e.bitcoin),e.litecoin&&n.set(m.LTC,e.litecoin),e.thorchain&&n.set(m.THORCHAIN,e.thorchain),e.bitcoincash&&n.set(m.BCH,e.bitcoincash),e.binance&&n.set(m.BINANCE,e.binance),r?.__XDEFI&&n.set(m.ETHEREUM,r),e.dogecoin&&n.set(m.DOGE,e.dogecoin),e.solana&&n.set(m.SOLANA,e.solana),n}o(R,"xdefi");async function y(e){let n=v.filter(t=>t!==m.ETHEREUM).map(t=>new Promise((s,a)=>{e.get(t).request({method:"request_accounts",params:[]},(c,l)=>{if(c)return a(c),c;s({accounts:l,chainId:t})})}));return await Promise.all(n)}o(y,"getNonEvmAccounts");function u(e,r,n,i,t,s,a,E,c){return new Promise(function(l,p){let N={asset:{chain:e,symbol:r,ticker:r},from:n,amount:{amount:i,decimals:t},memo:c};s&&(N.recipient=s),a.request({method:E,params:[N]},(k,I)=>{k?p(new O(D.SEND_TX_ERROR,void 0,k)):l(I)})})}o(u,"xdefiTransfer");import{DefaultEvmSigner as F}from"@rango-dev/signer-evm";import{DefaultSolanaSigner as L}from"@rango-dev/signer-solana";import{Networks as P,getNetworkInstance as A}from"@rango-dev/wallets-shared";import{DefaultSignerFactory as W,TransactionType as w}from"rango-types";import{SignerError as x}from"rango-types";var d=class{constructor(r){this.provider=r}async signMessage(){throw x.UnimplementedError("signMessage")}async signAndSendTx(r){if(r.rawTransfer===null)throw x.AssertionFailed("rawTransfer obj can not be null");let n=r.fromWalletAddress,{method:i,memo:t,recipient:s,decimals:a,amount:E,asset:c}=r.rawTransfer,l=r.blockChain;return{hash:await u(l,c.ticker,n,E,a,s,this.provider,i,t)}}};o(d,"CustomCosmosSigner");import{SignerError as H}from"rango-types";import{XDEFI_WALLET_SUPPORTED_NATIVE_CHAINS as U,getNetworkInstance as M}from"@rango-dev/wallets-shared";var h=class{constructor(r){this.provider=r}async signMessage(){throw H.UnimplementedError("signMessage")}async signAndSendTx(r){let{blockchain:n}=r.asset;if(!U.includes(n))throw new Error(`blockchain: ${n} transfer not implemented yet.`);let i=M(this.provider,n),{method:t,memo:s,recipientAddress:a,decimals:E,amount:c,fromWalletAddress:l,asset:p}=r;return{hash:await u(n,p.ticker,l,c,E,a,i,t,s)}}};o(h,"CustomTransferSigner");function C(e){let r=A(e,P.ETHEREUM),n=A(e,P.SOLANA),i=A(e,P.BINANCE),t=new W;return t.registerSigner(w.EVM,new F(r)),t.registerSigner(w.SOLANA,new L(n)),t.registerSigner(w.COSMOS,new d(i)),t.registerSigner(w.TRANSFER,new h(e)),t}o(C,"getSigners");var $=f.ETHEREUM,z=j.XDEFI,Oe={type:z,defaultNetwork:$},De=R,He=o(async({instance:e,meta:r})=>{let n=T(e,r,f.ETHEREUM),i=T(e,r,f.SOLANA);if(!n||!n.__XDEFI)throw new Error("Please 'Prioritise' XDEFI and refresh the page.");let t=await V(n),s=await y(e),a=await q({instance:i,meta:r});return[t,...s,a]},"connect"),Ue=o(({instance:e,meta:r,updateChainId:n,connect:i})=>{T(e,r,f.ETHEREUM)?.on("chainChanged",s=>{let a=G(s,r)||f.Unknown;n(s),i(a)})},"subscribe"),Me=K,Fe=X,Le=C,We=o(async({instance:e,meta:r})=>{let n=T(e,r,f.ETHEREUM);return n?B({instance:n,meta:r}):Promise.resolve(!1)},"canEagerConnect"),Be=o(e=>({name:"XDefi",img:"https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/xdefi/icon.svg",installLink:{CHROME:"https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf",BRAVE:"https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf",DEFAULT:"https://xdefi.io/"},color:"#0646c7",supportedChains:e.filter(r=>[...S,...Y,f.SOLANA].includes(r.name))}),"getWalletInfo");export{We as canEagerConnect,Fe as canSwitchNetworkTo,Oe as config,He as connect,De as getInstance,Le as getSigners,Be as getWalletInfo,Ue as subscribe,Me as switchNetwork};
//# sourceMappingURL=index.js.map
