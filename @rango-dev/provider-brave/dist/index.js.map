{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getEvmAccounts,\n  getSolanaAccounts,\n  Networks,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport {\n  evmBlockchains,\n  isEvmBlockchain,\n  isSolanaBlockchain,\n  solanaBlockchain,\n} from 'rango-types';\n\nimport { brave as brave_instances } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.BRAVE;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.ETHEREUM,\n};\n\nexport const getInstance = brave_instances;\n\nexport const connect: Connect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const sol_instance = chooseInstance(instance, meta, Networks.SOLANA);\n  const results: ProviderConnectResult[] = [];\n  const emptyWalletErrorCode = -32603;\n  const emptyWalletCustomErrorMessage = 'Please create or import a wallet';\n  let numberOfEmptyWallets = 0;\n\n  if (evm_instance) {\n    try {\n      const evmAccounts = await getEvmAccounts(evm_instance);\n      results.push(evmAccounts);\n    } catch (error) {\n      // To resolve this error: Catch clause variable type annotation must be any or unknown if specified\n      const err = error as { code: number };\n      if (err.code === emptyWalletErrorCode) {\n        numberOfEmptyWallets += 1;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  if (sol_instance) {\n    try {\n      const solanaAccounts = await getSolanaAccounts({\n        instance: sol_instance,\n        meta,\n      });\n      results.push(solanaAccounts as ProviderConnectResult);\n    } catch (error) {\n      // To resolve this error: Catch clause variable type annotation must be any or unknown if specified\n      const err = error as { code: number };\n      if (err.code === emptyWalletErrorCode) {\n        numberOfEmptyWallets += 1;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  if (numberOfEmptyWallets === instance.size) {\n    throw new Error(emptyWalletCustomErrorMessage);\n  }\n\n  return results;\n};\n\nexport const subscribe: Subscribe = ({\n  instance,\n  updateAccounts,\n  meta,\n  state,\n  updateChainId,\n}) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const sol_instance = chooseInstance(instance, meta, Networks.SOLANA);\n\n  evm_instance?.on('accountsChanged', (addresses: string[]) => {\n    const eth_chainId = meta\n      .filter(isEvmBlockchain)\n      .find((blockchain) => blockchain.name === Networks.ETHEREUM)?.chainId;\n    if (state.connected) {\n      if (state.network != Networks.ETHEREUM && eth_chainId) {\n        updateChainId(eth_chainId);\n      }\n      updateAccounts(addresses);\n    }\n  });\n\n  evm_instance?.on('chainChanged', (chainId: string) => {\n    updateChainId(chainId);\n  });\n\n  sol_instance?.on('accountChanged', async () => {\n    if (state.network != Networks.SOLANA) {\n      updateChainId(meta.filter(isSolanaBlockchain)[0].chainId);\n    }\n    const response = await sol_instance.connect();\n    const account: string = response.publicKey.toString();\n    updateAccounts([account]);\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const solana = solanaBlockchain(allBlockChains);\n  return {\n    name: 'Brave',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/brave/icon.svg',\n    installLink: {\n      DEFAULT: 'https://brave.com/wallet/',\n    },\n    color: '#ef342f',\n    supportedChains: [...evms, ...solana],\n  };\n};\n", "import { Networks } from '@rango-dev/wallets-shared';\n\nexport function brave() {\n  const { ethereum, braveSolana } = window;\n\n  const instances = new Map();\n\n  if (ethereum?.isBraveWallet) instances.set(Networks.ETHEREUM, ethereum);\n  if (braveSolana) instances.set(Networks.SOLANA, braveSolana);\n\n  if (instances.size === 0) return null;\n\n  return instances;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "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",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getEvmAccounts", "getSolanaAccounts", "Networks", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "isEvmBlockchain", "isSolanaBlockchain", "solanaBlockchain", "Networks", "brave", "ethereum", "braveSolana", "instances", "Networks", "__name", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "brave", "connect", "__name", "instance", "meta", "evm_instance", "chooseInstance", "sol_instance", "results", "emptyWalletErrorCode", "emptyWalletCustomErrorMessage", "numberOfEmptyWallets", "evmAccounts", "getEvmAccounts", "error", "solanaAccounts", "getSolanaAccounts", "subscribe", "updateAccounts", "state", "updateChainId", "addresses", "eth_chainId", "isEvmBlockchain", "blockchain", "chainId", "isSolanaBlockchain", "account", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "solana", "solanaBlockchain"]
}
