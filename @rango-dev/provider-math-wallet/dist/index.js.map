{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import {\n  Networks,\n  WalletTypes,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  chooseInstance,\n  getEvmAccounts,\n  subscribeToEvm,\n  WalletInfo,\n  CanEagerConnect,\n  canEagerlyConnectToEvm,\n} from '@rango-dev/wallets-shared';\nimport {\n  getNonEvmAccounts,\n  mathWallet as mathWallet_instance,\n} from './helpers';\nimport signer from './signer';\nimport {\n  SignerFactory,\n  evmBlockchains,\n  solanaBlockchain,\n  BlockchainMeta,\n} from 'rango-types';\n\nconst WALLET = WalletTypes.MATH;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.ETHEREUM,\n};\n\nexport const getInstance = mathWallet_instance;\nexport const connect: Connect = async ({ instance, meta }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n\n  let results: ProviderConnectResult[] = [];\n\n  if (ethInstance) {\n    const evmResult = await getEvmAccounts(ethInstance);\n    results.push(evmResult);\n  }\n\n  const nonEvmResults = await getNonEvmAccounts(instance);\n  results = [...results, ...nonEvmResults];\n\n  return results;\n};\n\nexport const subscribe: Subscribe = (options) => {\n  const ethInstance = chooseInstance(\n    options.instance,\n    options.meta,\n    Networks.ETHEREUM\n  );\n\n  if (ethInstance) {\n    subscribeToEvm({ ...options, instance: ethInstance });\n  }\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = () => false;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  } else return Promise.resolve(false);\n};\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const solana = solanaBlockchain(allBlockChains);\n  return {\n    name: 'Math Wallet',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/math/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/math-wallet/afbcbjpbpfadlkmhmclhkeeodmamcflc',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/math-wallet/afbcbjpbpfadlkmhmclhkeeodmamcflc',\n      DEFAULT: 'https://mathwallet.org/en-us/',\n    },\n    color: '#2b2f25',\n    supportedChains: [...evms, ...solana],\n  };\n};\n", "import {\n  Network,\n  Networks,\n  ProviderConnectResult,\n} from '@rango-dev/wallets-shared';\n\ntype Provider = Map<Network, any>;\n\nexport function mathWallet() {\n  const instances = new Map();\n  const { solana, ethereum } = window;\n\n  if (!!solana && solana.isMathWallet) instances.set(Networks.SOLANA, solana);\n\n  if (ethereum && ethereum.isMathWallet)\n    instances.set(Networks.ETHEREUM, ethereum);\n\n  if (instances.size === 0) return null;\n\n  return instances;\n}\n\nexport async function getNonEvmAccounts(\n  instances: Provider\n): Promise<ProviderConnectResult[]> {\n  // Getting Solana accounts\n  const solanaInstance = instances.get(Networks.SOLANA);\n  const results: ProviderConnectResult[] = [];\n\n  if (solanaInstance) {\n    // Asking for account from wallet.\n    const solanaResponse = await solanaInstance.connect();\n\n    const solanaAccounts: string = solanaResponse.publicKey.toString();\n\n    results.push({\n      accounts: [solanaAccounts],\n      chainId: Networks.SOLANA,\n    });\n  }\n\n  return results;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "+EAAA,OACE,YAAAA,EACA,eAAAC,EAKA,kBAAAC,EACA,kBAAAC,EACA,kBAAAC,EAGA,0BAAAC,MACK,4BCbP,OAEE,YAAAC,MAEK,4BAIA,SAASC,GAAa,CAC3B,IAAMC,EAAY,IAAI,IAChB,CAAE,OAAAC,EAAQ,SAAAC,CAAS,EAAI,OAO7B,OALMD,GAAUA,EAAO,cAAcD,EAAU,IAAIG,EAAS,OAAQF,CAAM,EAEtEC,GAAYA,EAAS,cACvBF,EAAU,IAAIG,EAAS,SAAUD,CAAQ,EAEvCF,EAAU,OAAS,EAAU,KAE1BA,CACT,CAZgBI,EAAAL,EAAA,cAchB,eAAsBM,EACpBL,EACkC,CAElC,IAAMM,EAAiBN,EAAU,IAAIG,EAAS,MAAM,EAC9CI,EAAmC,CAAC,EAE1C,GAAID,EAAgB,CAIlB,IAAME,GAFiB,MAAMF,EAAe,QAAQ,GAEN,UAAU,SAAS,EAEjEC,EAAQ,KAAK,CACX,SAAU,CAACC,CAAc,EACzB,QAASL,EAAS,MACpB,CAAC,EAGH,OAAOI,CACT,CApBsBH,EAAAC,EAAA,qBCtBtB,OAAS,oBAAAI,MAAwB,wBACjC,OAAS,uBAAAC,MAA2B,2BACpC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,QAAQ,EAC5DC,EAAcF,EAAmBF,EAAUG,EAAS,MAAM,EAC1DE,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBP,CAAW,CAAC,EACpEI,EAAQ,eAAeE,EAAO,OAAQ,IAAIE,EAAoBL,CAAW,CAAC,EACnEC,CACT,CAPwBK,EAAAX,EAAA,cFUxB,OAEE,kBAAAY,EACA,oBAAAC,MAEK,cAEP,IAAMC,EAASC,EAAY,KAEdC,EAAS,CACpB,KAAMF,EACN,eAAgBG,EAAS,QAC3B,EAEaC,EAAcC,EACdC,GAAmBC,EAAA,MAAO,CAAE,SAAAC,EAAU,KAAAC,CAAK,IAAM,CAC5D,IAAMC,EAAcC,EAAeH,EAAUC,EAAMN,EAAS,QAAQ,EAEhES,EAAmC,CAAC,EAExC,GAAIF,EAAa,CACf,IAAMG,EAAY,MAAMC,EAAeJ,CAAW,EAClDE,EAAQ,KAAKC,CAAS,EAGxB,IAAME,EAAgB,MAAMC,EAAkBR,CAAQ,EACtD,OAAAI,EAAU,CAAC,GAAGA,EAAS,GAAGG,CAAa,EAEhCH,CACT,EAdgC,WAgBnBK,GAAuBV,EAACW,GAAY,CAC/C,IAAMR,EAAcC,EAClBO,EAAQ,SACRA,EAAQ,KACRf,EAAS,QACX,EAEIO,GACFS,EAAe,CAAE,GAAGD,EAAS,SAAUR,CAAY,CAAC,CAExD,EAVoC,aAYvBU,GAAuCb,EAAA,IAAM,GAAN,sBAEvCc,GAA+CA,EAE/CC,GAAmCf,EAAA,CAAC,CAAE,SAAAC,EAAU,KAAAC,CAAK,IAAM,CACtE,IAAMc,EAAeZ,EAAeH,EAAUC,EAAMN,EAAS,QAAQ,EACrE,OAAIoB,EACKC,EAAuB,CAAE,SAAUD,EAAc,KAAAd,CAAK,CAAC,EAClD,QAAQ,QAAQ,EAAK,CACrC,EALgD,mBAMnCgB,GAAkElB,EAC7EmB,GACG,CACH,IAAMC,EAAOC,EAAeF,CAAc,EACpCG,EAASC,EAAiBJ,CAAc,EAC9C,MAAO,CACL,KAAM,cACN,IAAK,qFACL,YAAa,CACX,OACE,yFACF,MACE,yFACF,QAAS,+BACX,EACA,MAAO,UACP,gBAAiB,CAAC,GAAGC,EAAM,GAAGE,CAAM,CACtC,CACF,EAlB+E",
  "names": ["Networks", "WalletTypes", "chooseInstance", "getEvmAccounts", "subscribeToEvm", "canEagerlyConnectToEvm", "Networks", "mathWallet", "instances", "solana", "ethereum", "Networks", "__name", "getNonEvmAccounts", "solanaInstance", "results", "solanaAccounts", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "__name", "evmBlockchains", "solanaBlockchain", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "mathWallet", "connect", "__name", "instance", "meta", "ethInstance", "chooseInstance", "results", "evmResult", "getEvmAccounts", "nonEvmResults", "getNonEvmAccounts", "subscribe", "options", "subscribeToEvm", "canSwitchNetworkTo", "getSigners", "canEagerConnect", "evm_instance", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "solana", "solanaBlockchain"]
}
