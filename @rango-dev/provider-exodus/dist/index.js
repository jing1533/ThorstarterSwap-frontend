var N=Object.defineProperty;var c=(t,e)=>N(t,"name",{value:e,configurable:!0});import{canEagerlyConnectToEvm as y,canSwitchNetworkToEvm as R,chooseInstance as l,getEvmAccounts as v,Networks as s,switchNetworkForEvm as I,WalletTypes as O}from"@rango-dev/wallets-shared";import{isEvmBlockchain as L,isSolanaBlockchain as M}from"rango-types";import{Networks as r}from"@rango-dev/wallets-shared";function h(){let{exodus:t}=window;if(!t)return null;let e=new Map;return t.ethereum&&e.set(r.ETHEREUM,t.ethereum),t.solana&&e.set(r.SOLANA,t.solana),e}c(h,"exodus_instances");async function S(t){let e=await t.get(r.SOLANA),n=[];if(e){let a=(await e.connect()).publicKey.toString();n.push({accounts:a?[a]:[],chainId:r.SOLANA})}return n}c(S,"getSolanaAccounts");var d=[r.SOLANA,r.ETHEREUM,r.BSC,r.POLYGON,r.AVAX_CCHAIN,r.BINANCE];import{DefaultEvmSigner as k}from"@rango-dev/signer-evm";import{DefaultSolanaSigner as x}from"@rango-dev/signer-solana";import{Networks as p,getNetworkInstance as A}from"@rango-dev/wallets-shared";import{DefaultSignerFactory as T,TransactionType as C}from"rango-types";function g(t){let e=A(t,p.ETHEREUM),n=A(t,p.SOLANA),o=new T;return o.registerSigner(C.EVM,new k(e)),o.registerSigner(C.COSMOS,new x(n)),o}c(g,"getSigners");var U=O.EXODUS,K={type:U,defaultNetwork:s.ETHEREUM},Q=h,Z=c(async({instance:t,meta:e})=>{let n=l(t,e,s.ETHEREUM),o=[];if(n){let i=await v(n);o.push(i)}let a=await S(t);return o=[...o,...a],o},"connect"),$=c(t=>{let e=l(t.instance,t.meta,s.ETHEREUM),n=l(t.instance,t.meta,s.SOLANA),{connect:o,updateAccounts:a,state:i,updateChainId:w,meta:f}=t;e?.on("accountsChanged",u=>{let m=f.filter(L).find(E=>E.name===s.ETHEREUM)?.chainId;i.connected&&(i.network!=s.ETHEREUM&&m&&w(m),a(u))}),n?.on("accountChanged",async u=>{i.network!=s.SOLANA&&w(f.filter(M)[0].chainId);let m=s.SOLANA;if(u){let E=u.toString();a([E])}else o(m)})},"subscribe"),tt=c(async t=>{let e=l(t.instance,t.meta,t.network);return I({...t,instance:e})},"switchNetwork"),et=R,nt=g,ot=c(async({instance:t,meta:e})=>{let n=l(t,e,s.ETHEREUM);return n?y({instance:n,meta:e}):Promise.resolve(!1)},"canEagerConnect"),ct=c(t=>({name:"Exodus",img:"https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/exodus/icon.svg",installLink:{CHROME:"https://chrome.google.com/webstore/detail/exodus-web3-wallet/aholpfdialjgjfhomihkjbmgjidlcdno",BRAVE:"https://chrome.google.com/webstore/detail/exodus-web3-wallet/aholpfdialjgjfhomihkjbmgjidlcdno",DEFAULT:"https://www.exodus.com/"},color:"#8f70fa",supportedChains:t.filter(e=>d.includes(e.name))}),"getWalletInfo");export{ot as canEagerConnect,et as canSwitchNetworkTo,K as config,Z as connect,Q as getInstance,nt as getSigners,ct as getWalletInfo,$ as subscribe,tt as switchNetwork};
//# sourceMappingURL=index.js.map
