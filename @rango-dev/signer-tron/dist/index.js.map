{
  "version": 3,
  "sources": ["../src/signer.ts"],
  "sourcesContent": ["import type { GenericSigner, TronTransaction } from 'rango-types';\n\nimport { SignerError, SignerErrorCode } from 'rango-types';\n\n// TODO - replace with real type\n// tslint:disable-next-line: no-any\ntype TronExternalProvider = any;\n\nexport class DefaultTronSigner implements GenericSigner<TronTransaction> {\n  private provider: TronExternalProvider;\n\n  constructor(provider: TronExternalProvider) {\n    this.provider = provider;\n  }\n\n  async signMessage(): Promise<string> {\n    throw SignerError.UnimplementedError('signMessage');\n  }\n\n  async signAndSendTx(tx: TronTransaction): Promise<{ hash: string }> {\n    try {\n      const transaction = DefaultTronSigner.buildTx(tx);\n      const signedTxn = await this.provider.tronWeb.trx.sign(transaction);\n      const receipt = await this.provider.tronWeb.trx.sendRawTransaction(\n        signedTxn\n      );\n      const hash = receipt?.transaction?.txID;\n      return { hash };\n    } catch (error) {\n      throw new SignerError(SignerErrorCode.SEND_TX_ERROR, undefined, error);\n    }\n  }\n\n  static buildTx(tronTx: TronTransaction) {\n    let tx = {};\n    if (!!tronTx.txID) tx = { ...tx, txID: tronTx.txID };\n    if (tronTx.visible !== undefined) tx = { ...tx, visible: tronTx.visible };\n    if (!!tronTx.__payload__) tx = { ...tx, __payload__: tronTx.__payload__ };\n    if (!!tronTx.raw_data) tx = { ...tx, raw_data: tronTx.raw_data };\n    if (!!tronTx.raw_data_hex)\n      tx = { ...tx, raw_data_hex: tronTx.raw_data_hex };\n    return tx;\n  }\n}\n"],
  "mappings": "+EAEA,OAAS,eAAAA,EAAa,mBAAAC,MAAuB,cAMtC,IAAMC,EAAN,KAAkE,CAGvE,YAAYC,EAAgC,CAC1C,KAAK,SAAWA,CAClB,CAEA,MAAM,aAA+B,CACnC,MAAMC,EAAY,mBAAmB,aAAa,CACpD,CAEA,MAAM,cAAcC,EAAgD,CAClE,GAAI,CACF,IAAMC,EAAcJ,EAAkB,QAAQG,CAAE,EAC1CE,EAAY,MAAM,KAAK,SAAS,QAAQ,IAAI,KAAKD,CAAW,EAKlE,MAAO,CAAE,MAJO,MAAM,KAAK,SAAS,QAAQ,IAAI,mBAC9CC,CACF,IACsB,aAAa,IACrB,CAChB,OAASC,EAAP,CACA,MAAM,IAAIJ,EAAYK,EAAgB,cAAe,OAAWD,CAAK,CACvE,CACF,CAEA,OAAO,QAAQE,EAAyB,CACtC,IAAIL,EAAK,CAAC,EACV,OAAMK,EAAO,OAAML,EAAK,CAAE,GAAGA,EAAI,KAAMK,EAAO,IAAK,GAC/CA,EAAO,UAAY,SAAWL,EAAK,CAAE,GAAGA,EAAI,QAASK,EAAO,OAAQ,GAClEA,EAAO,cAAaL,EAAK,CAAE,GAAGA,EAAI,YAAaK,EAAO,WAAY,GAClEA,EAAO,WAAUL,EAAK,CAAE,GAAGA,EAAI,SAAUK,EAAO,QAAS,GACzDA,EAAO,eACXL,EAAK,CAAE,GAAGA,EAAI,aAAcK,EAAO,YAAa,GAC3CL,CACT,CACF,EAnCaM,EAAAT,EAAA",
  "names": ["SignerError", "SignerErrorCode", "DefaultTronSigner", "provider", "SignerError", "tx", "transaction", "signedTxn", "error", "SignerErrorCode", "tronTx", "__name"]
}
