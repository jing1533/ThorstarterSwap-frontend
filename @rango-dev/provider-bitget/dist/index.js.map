{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getEvmAccounts,\n  Networks,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { evmBlockchains, isEvmBlockchain, tronBlockchain } from 'rango-types';\n\nimport { bitgetInstances } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.BITGET;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.ETHEREUM,\n};\n\nexport const getInstance = bitgetInstances;\n\nexport const connect: Connect = async ({ instance, meta }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const tronInstance = chooseInstance(instance, meta, Networks.TRON);\n\n  const results: ProviderConnectResult[] = [];\n\n  if (ethInstance) {\n    const evmResult = await getEvmAccounts(ethInstance);\n    results.push(evmResult);\n  }\n\n  if (tronInstance) {\n    const res = await tronInstance.request({ method: 'tron_requestAccounts' });\n    if (!res) {\n      throw new Error('Please unlock your TronLink extension first.');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (!!res?.code && !!res.message && res.code !== 200) {\n      throw new Error(res.message);\n    }\n    const address = tronInstance.tronWeb.defaultAddress.base58;\n    results.push({\n      accounts: address ? [address] : [],\n      chainId: Networks.TRON,\n    });\n  }\n\n  return results;\n};\n\nexport const subscribe: Subscribe = ({\n  instance,\n  state,\n  updateChainId,\n  updateAccounts,\n  meta,\n  connect,\n  disconnect,\n}) => {\n  const ethInstance = instance.get(Networks.ETHEREUM);\n  const evmBlockchainMeta = meta.filter(isEvmBlockchain);\n\n  subscribeToEvm({\n    instance: ethInstance,\n    state,\n    updateChainId,\n    updateAccounts,\n    meta: evmBlockchainMeta,\n    connect,\n    disconnect,\n  });\n\n  window.addEventListener('message', (e) => {\n    if (\n      e.data.isTronLink &&\n      e.data.message &&\n      e.data.message.action == 'accountsChanged'\n    ) {\n      const account = e?.data?.message?.data?.address;\n      if (account) {\n        updateAccounts([account]);\n      } else {\n        disconnect();\n      }\n    }\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const tron = tronBlockchain(allBlockChains);\n  return {\n    name: 'Bitget Wallet',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/bitget/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/bitkeep-crypto-nft-wallet/jiidiaalihmmhddjgbnbgdfflelocpak',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/bitkeep-crypto-nft-wallet/jiidiaalihmmhddjgbnbgdfflelocpak',\n      DEFAULT: 'https://web3.bitget.com/en/wallet-download?type=1',\n    },\n    color: '#ffffff',\n    supportedChains: [...evms, ...tron],\n  };\n};\n", "import type { Network } from '@rango-dev/wallets-shared';\n\nimport { Networks } from '@rango-dev/wallets-shared';\n\ntype Provider = Map<Network, any>;\n\nexport function bitgetInstances(): Provider | null {\n  const instances: Provider = new Map();\n  const { bitkeep } = window;\n\n  if (!bitkeep) {\n    return null;\n  }\n\n  if (bitkeep.ethereum) {\n    instances.set(Networks.ETHEREUM, bitkeep.ethereum);\n  }\n\n  if (bitkeep.tronLink) {\n    instances.set(Networks.TRON, bitkeep.tronLink);\n  }\n\n  if (instances.size === 0) {\n    return null;\n  }\n\n  return instances;\n}\n", "import type { SignerFactory } from 'rango-types';\n\nimport { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultTronSigner } from '@rango-dev/signer-tron';\nimport { getNetworkInstance, Networks } from '@rango-dev/wallets-shared';\nimport { DefaultSignerFactory, TransactionType as TxType } from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const tronProvider = getNetworkInstance(provider, Networks.TRON);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.TRON, new DefaultTronSigner(tronProvider));\n  return signers;\n}\n"],
  "mappings": "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",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getEvmAccounts", "Networks", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "isEvmBlockchain", "tronBlockchain", "Networks", "bitgetInstances", "instances", "bitkeep", "Networks", "__name", "DefaultEvmSigner", "DefaultTronSigner", "getNetworkInstance", "Networks", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "tronProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultTronSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "bitgetInstances", "connect", "__name", "instance", "meta", "ethInstance", "chooseInstance", "tronInstance", "results", "evmResult", "getEvmAccounts", "res", "address", "subscribe", "state", "updateChainId", "updateAccounts", "disconnect", "evmBlockchainMeta", "isEvmBlockchain", "subscribeToEvm", "e", "account", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "canEagerConnect", "evm_instance", "canEagerlyConnectToEvm", "getSigners", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "tron", "tronBlockchain"]
}
