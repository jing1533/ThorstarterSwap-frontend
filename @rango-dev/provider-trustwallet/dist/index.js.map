{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  getEvmAccounts,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { evmBlockchains } from 'rango-types';\n\nimport { trustWallet as trustwallet_instance } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.TRUST_WALLET;\n\nexport const config = {\n  type: WALLET,\n};\n\nexport const getInstance = trustwallet_instance;\n\n// doc: https://developer.trustwallet.com/trust-wallet-browser-extension/extension-guide\nexport const connect: Connect = async ({ instance }) => {\n  const { accounts, chainId } = await getEvmAccounts(instance);\n  return {\n    accounts,\n    chainId,\n  };\n};\n\nexport const subscribe: Subscribe = subscribeToEvm;\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = canEagerlyConnectToEvm;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  return {\n    name: 'Trust Wallet',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/trustwallet/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/trust-wallet/egjidjbpglichdcondbcbdnbeeppgdph/',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/trust-wallet/egjidjbpglichdcondbcbdnbeeppgdph/',\n      DEFAULT: 'https://trustwallet.com/browser-extension',\n    },\n    color: '#ffffff',\n    supportedChains: evms,\n  };\n};\n", "export function trustWallet() {\n  const { trustwallet } = window;\n  \n  if (!!trustwallet && (trustwallet?.isTrust || trustwallet?.isTrustWallet)) {\n    return trustwallet;\n  }\n  return null;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  return signers;\n}\n"],
  "mappings": "+EAUA,OACE,0BAAAA,EACA,yBAAAC,EACA,kBAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BACP,OAAS,kBAAAC,MAAsB,cClBxB,SAASC,GAAc,CAC5B,GAAM,CAAE,YAAAC,CAAY,EAAI,OAExB,OAAMA,IAAgBA,GAAa,SAAWA,GAAa,eAClDA,EAEF,IACT,CAPgBC,EAAAF,EAAA,eCAhB,OAAS,oBAAAG,MAAwB,wBACjC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,QAAQ,EAC5DC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBN,CAAW,CAAC,EAC7DG,CACT,CALwBI,EAAAT,EAAA,cFexB,IAAMU,EAASC,EAAY,aAEdC,EAAS,CACpB,KAAMF,CACR,EAEaG,EAAcC,EAGdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,CAAS,IAAM,CACtD,GAAM,CAAE,SAAAC,EAAU,QAAAC,CAAQ,EAAI,MAAMC,EAAeH,CAAQ,EAC3D,MAAO,CACL,SAAAC,EACA,QAAAC,CACF,CACF,EANgC,WAQnBE,EAAuBC,EAEvBC,EAA+BC,EAE/BC,EAAuCC,EAEvCC,EAA+CA,EAE/CC,EAAmCC,EAEnCC,EAAkEd,EAC7Ee,GACG,CACH,IAAMC,EAAOC,EAAeF,CAAc,EAC1C,MAAO,CACL,KAAM,eACN,IAAK,4FACL,YAAa,CACX,OACE,2FACF,MACE,2FACF,QAAS,2CACX,EACA,MAAO,UACP,gBAAiBC,CACnB,CACF,EAjB+E",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "getEvmAccounts", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "trustWallet", "trustwallet", "__name", "DefaultEvmSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "__name", "WALLET", "WalletTypes", "config", "getInstance", "trustWallet", "connect", "__name", "instance", "accounts", "chainId", "getEvmAccounts", "subscribe", "subscribeToEvm", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains"]
}
