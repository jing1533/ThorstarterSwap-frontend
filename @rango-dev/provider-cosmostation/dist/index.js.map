{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getCosmosAccounts,\n  getEvmAccounts,\n  Networks,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport {\n  cosmosBlockchains,\n  evmBlockchains,\n  isCosmosBlockchain,\n  isEvmBlockchain,\n} from 'rango-types';\n\nimport { cosmostation as cosmostation_instance } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.COSMOSTATION;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.COSMOS,\n};\n\nexport const getInstance = cosmostation_instance;\nexport const connect: Connect = async ({ instance, meta, network }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const cosmosInstance = chooseInstance(instance, meta, Networks.COSMOS);\n\n  const results: ProviderConnectResult[] = [];\n\n  if (ethInstance) {\n    const evmResult = await getEvmAccounts(ethInstance);\n    results.push(evmResult);\n  }\n\n  if (cosmosInstance) {\n    const cosmosBlockchainMeta = meta.filter(isCosmosBlockchain);\n    const requestedNetwork = network || Networks.COSMOS;\n\n    const comsmosResult = await getCosmosAccounts({\n      instance: cosmosInstance,\n      meta: cosmosBlockchainMeta,\n      network: requestedNetwork,\n    });\n    if (Array.isArray(comsmosResult)) {\n      results.push(...comsmosResult);\n    } else {\n      results.push(comsmosResult);\n    }\n  }\n\n  return results;\n};\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const subscribe: Subscribe = ({\n  instance,\n  state,\n  updateChainId,\n  updateAccounts,\n  meta,\n  connect,\n  disconnect,\n}) => {\n  const ethInstance = instance.get(Networks.ETHEREUM);\n  const EvmBlockchainMeta = meta.filter(isEvmBlockchain);\n\n  subscribeToEvm({\n    instance: ethInstance,\n    state,\n    updateChainId,\n    updateAccounts,\n    meta: EvmBlockchainMeta,\n    connect,\n    disconnect,\n  });\n\n  window.cosmostation.cosmos.on('accountChanged', () => {\n    disconnect();\n    connect();\n  });\n};\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const cosmos = cosmosBlockchains(allBlockChains);\n  return {\n    name: 'Cosmostation',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/cosmostation/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/cosmostation/fpkhgmpbidmiogeglndfbkegfdlnajnf',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/cosmostation/fpkhgmpbidmiogeglndfbkegfdlnajnf',\n      DEFAULT: 'https://cosmostation.io/',\n    },\n    color: 'black',\n    supportedChains: [...evms, ...cosmos],\n  };\n};\n", "import { Networks } from '@rango-dev/wallets-shared';\n\nexport function cosmostation() {\n  const { cosmostation } = window;\n  const instances = new Map();\n\n  if (!cosmostation || !cosmostation.providers) return null;\n\n  const evmInstance = cosmostation.providers.metamask;\n  if (evmInstance) instances.set(Networks.ETHEREUM, evmInstance);\n\n  const cosmosInstance = cosmostation.providers.keplr;\n  if (cosmosInstance) instances.set(Networks.COSMOS, cosmosInstance);\n\n  if (instances.size === 0) return null;\n\n  return instances;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultCosmosSigner } from '@rango-dev/signer-cosmos';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const cosmosProvider = getNetworkInstance(provider, Networks.COSMOS);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(\n    TxType.COSMOS,\n    new DefaultCosmosSigner(cosmosProvider)\n  );\n  return signers;\n}\n"],
  "mappings": "+EAWA,OACE,0BAAAA,EACA,yBAAAC,EACA,kBAAAC,EACA,qBAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BACP,OACE,qBAAAC,EACA,kBAAAC,EACA,sBAAAC,EACA,mBAAAC,MACK,cC3BP,OAAS,YAAAC,MAAgB,4BAElB,SAASC,GAAe,CAC7B,GAAM,CAAE,aAAAA,CAAa,EAAI,OACnBC,EAAY,IAAI,IAEtB,GAAI,CAACD,GAAgB,CAACA,EAAa,UAAW,OAAO,KAErD,IAAME,EAAcF,EAAa,UAAU,SACvCE,GAAaD,EAAU,IAAIE,EAAS,SAAUD,CAAW,EAE7D,IAAME,EAAiBJ,EAAa,UAAU,MAG9C,OAFII,GAAgBH,EAAU,IAAIE,EAAS,OAAQC,CAAc,EAE7DH,EAAU,OAAS,EAAU,KAE1BA,CACT,CAfgBI,EAAAL,EAAA,gBCFhB,OAAS,oBAAAM,MAAwB,wBACjC,OAAS,uBAAAC,MAA2B,2BACpC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,QAAQ,EAC5DC,EAAiBF,EAAmBF,EAAUG,EAAS,MAAM,EAC7DE,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBP,CAAW,CAAC,EACpEI,EAAQ,eACNE,EAAO,OACP,IAAIE,EAAoBL,CAAc,CACxC,EACOC,CACT,CAVwBK,EAAAX,EAAA,cFuBxB,IAAMY,EAASC,EAAY,aAEdC,EAAS,CACpB,KAAMF,EACN,eAAgBG,EAAS,MAC3B,EAEaC,EAAcC,EACdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,EAAU,KAAAC,EAAM,QAAAC,CAAQ,IAAM,CACrE,IAAMC,EAAcC,EAAeJ,EAAUC,EAAMN,EAAS,QAAQ,EAC9DU,EAAiBD,EAAeJ,EAAUC,EAAMN,EAAS,MAAM,EAE/DW,EAAmC,CAAC,EAE1C,GAAIH,EAAa,CACf,IAAMI,EAAY,MAAMC,EAAeL,CAAW,EAClDG,EAAQ,KAAKC,CAAS,EAGxB,GAAIF,EAAgB,CAClB,IAAMI,EAAuBR,EAAK,OAAOS,CAAkB,EACrDC,EAAmBT,GAAWP,EAAS,OAEvCiB,EAAgB,MAAMC,EAAkB,CAC5C,SAAUR,EACV,KAAMI,EACN,QAASE,CACX,CAAC,EACG,MAAM,QAAQC,CAAa,EAC7BN,EAAQ,KAAK,GAAGM,CAAa,EAE7BN,EAAQ,KAAKM,CAAa,EAI9B,OAAON,CACT,EA5BgC,WA8BnBQ,EAA+BC,EAE/BC,EAAuCC,EAEvCC,GAAuBnB,EAAA,CAAC,CACnC,SAAAC,EACA,MAAAmB,EACA,cAAAC,EACA,eAAAC,EACA,KAAApB,EACA,QAAAH,EACA,WAAAwB,CACF,IAAM,CACJ,IAAMnB,EAAcH,EAAS,IAAIL,EAAS,QAAQ,EAC5C4B,EAAoBtB,EAAK,OAAOuB,CAAe,EAErDC,EAAe,CACb,SAAUtB,EACV,MAAAgB,EACA,cAAAC,EACA,eAAAC,EACA,KAAME,EACN,QAAAzB,EACA,WAAAwB,CACF,CAAC,EAED,OAAO,aAAa,OAAO,GAAG,iBAAkB,IAAM,CACpDA,EAAW,EACXxB,EAAQ,CACV,CAAC,CACH,EA1BoC,aA4BvB4B,GAA+CA,EAE/CC,GAAmC5B,EAAA,MAAO,CAAE,SAAAC,EAAU,KAAAC,CAAK,IAAM,CAC5E,IAAM2B,EAAexB,EAAeJ,EAAUC,EAAMN,EAAS,QAAQ,EACrE,OAAIiC,EACKC,EAAuB,CAAE,SAAUD,EAAc,KAAA3B,CAAK,CAAC,EAEzD,QAAQ,QAAQ,EAAK,CAC9B,EANgD,mBAQnC6B,GAAkE/B,EAC7EgC,GACG,CACH,IAAMC,EAAOC,EAAeF,CAAc,EACpCG,EAASC,EAAkBJ,CAAc,EAC/C,MAAO,CACL,KAAM,eACN,IAAK,6FACL,YAAa,CACX,OACE,0FACF,MACE,0FACF,QAAS,0BACX,EACA,MAAO,QACP,gBAAiB,CAAC,GAAGC,EAAM,GAAGE,CAAM,CACtC,CACF,EAlB+E",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getCosmosAccounts", "getEvmAccounts", "Networks", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "cosmosBlockchains", "evmBlockchains", "isCosmosBlockchain", "isEvmBlockchain", "Networks", "cosmostation", "instances", "evmInstance", "Networks", "cosmosInstance", "__name", "DefaultEvmSigner", "DefaultCosmosSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "cosmosProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultCosmosSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "cosmostation", "connect", "__name", "instance", "meta", "network", "ethInstance", "chooseInstance", "cosmosInstance", "results", "evmResult", "getEvmAccounts", "cosmosBlockchainMeta", "isCosmosBlockchain", "requestedNetwork", "comsmosResult", "getCosmosAccounts", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "subscribe", "state", "updateChainId", "updateAccounts", "disconnect", "EvmBlockchainMeta", "isEvmBlockchain", "subscribeToEvm", "getSigners", "canEagerConnect", "evm_instance", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "cosmos", "cosmosBlockchains"]
}
