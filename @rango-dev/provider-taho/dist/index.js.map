{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  Networks,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  getEvmAccounts,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\n\nimport {\n  taho as taho_instances,\n  TAHO_WALLET_SUPPORTED_CHAINS,\n} from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.TAHO;\n\nexport const config = {\n  type: WALLET,\n};\n\nexport const getInstance = taho_instances;\n\nexport const connect: Connect = async ({ instance }) => {\n  const { accounts, chainId } = await getEvmAccounts(instance);\n\n  return {\n    accounts,\n    chainId,\n  };\n};\nexport const subscribe: Subscribe = subscribeToEvm;\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = canEagerlyConnectToEvm;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  return {\n    name: 'Taho',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/taho/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/taho/eajafomhmkipbjmfmhebemolkcicgfmd',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/taho/eajafomhmkipbjmfmhebemolkcicgfmd',\n      DEFAULT: 'https://taho.xyz',\n    },\n    color: '#ffffff',\n    supportedChains: allBlockChains.filter((blockchainMeta) =>\n      TAHO_WALLET_SUPPORTED_CHAINS.includes(blockchainMeta.name as Networks)\n    ),\n  };\n};\n", "import { Networks } from '@rango-dev/wallets-shared';\n\nexport function taho() {\n  const { tally } = window;\n\n  if (!tally) return null;\n\n  return tally;\n}\n\nexport const TAHO_WALLET_SUPPORTED_CHAINS = [\n  Networks.ETHEREUM,\n  Networks.POLYGON,\n  Networks.OPTIMISM,\n  Networks.ARBITRUM,\n  Networks.AVAX_CCHAIN,\n  Networks.BINANCE,\n];\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(provider));\n  return signers;\n}\n"],
  "mappings": "+EAWA,OACE,0BAAAA,EACA,yBAAAC,EACA,kBAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BClBP,OAAS,YAAAC,MAAgB,4BAElB,SAASC,GAAO,CACrB,GAAM,CAAE,MAAAC,CAAM,EAAI,OAElB,OAAKA,GAAc,IAGrB,CANgBC,EAAAF,EAAA,QAQT,IAAMG,EAA+B,CAC1CC,EAAS,SACTA,EAAS,QACTA,EAAS,SACTA,EAAS,SACTA,EAAS,YACTA,EAAS,OACX,ECjBA,OAAS,oBAAAC,MAAwB,wBACjC,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBJ,CAAQ,CAAC,EAC1DC,CACT,CAJwBI,EAAAN,EAAA,cFmBxB,IAAMO,EAASC,EAAY,KAEdC,EAAS,CACpB,KAAMF,CACR,EAEaG,EAAcC,EAEdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,CAAS,IAAM,CACtD,GAAM,CAAE,SAAAC,EAAU,QAAAC,CAAQ,EAAI,MAAMC,EAAeH,CAAQ,EAE3D,MAAO,CACL,SAAAC,EACA,QAAAC,CACF,CACF,EAPgC,WAQnBE,EAAuBC,EAEvBC,EAA+BC,EAE/BC,EAAuCC,EAEvCC,EAA+CA,EAE/CC,EAAmCC,EAEnCC,EAAkEd,EAC7Ee,IAEO,CACL,KAAM,OACN,IAAK,qFACL,YAAa,CACX,OACE,kFACF,MACE,kFACF,QAAS,kBACX,EACA,MAAO,UACP,gBAAiBA,EAAe,OAAQC,GACtCC,EAA6B,SAASD,EAAe,IAAgB,CACvE,CACF,GAjB6E",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "getEvmAccounts", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "Networks", "taho", "tally", "__name", "TAHO_WALLET_SUPPORTED_CHAINS", "Networks", "DefaultEvmSigner", "DefaultSignerFactory", "TxType", "getSigners", "provider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "__name", "WALLET", "WalletTypes", "config", "getInstance", "taho", "connect", "__name", "instance", "accounts", "chainId", "getEvmAccounts", "subscribe", "subscribeToEvm", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "blockchainMeta", "TAHO_WALLET_SUPPORTED_CHAINS"]
}
