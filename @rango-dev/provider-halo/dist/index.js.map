{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanSwitchNetwork,\n  Connect,\n  Networks,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canSwitchNetworkToEvm,\n  getEvmAccounts,\n  subscribeToEvm,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\n\nimport {\n  getHaloInstance as halo_instance,\n  HALO_WALLET_SUPPORTED_CHAINS,\n} from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.HALO;\n\nexport const config = {\n  type: WALLET,\n};\n\nexport const getInstance = halo_instance;\nexport const connect: Connect = async ({ instance }) => {\n  /*\n   * Note: We need to get `chainId` here, because for the first time\n   * after opening the browser, wallet is locked, and don't give us accounts and chainId\n   * on `check` phase, so `network` will be null. For this case we need to get chainId\n   * whenever we are requesting accounts.\n   */\n  const { accounts, chainId } = await getEvmAccounts(instance);\n\n  return {\n    accounts,\n    chainId,\n  };\n};\n\nexport const subscribe: Subscribe = subscribeToEvm;\n\nexport const switchNetwork: SwitchNetwork = switchNetworkForEvm;\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  return {\n    name: 'Halo',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/halo/icon.svg',\n    color: '#b2dbff',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/halo-wallet/nbdpmlhambbdkhkmbfpljckjcmgibalo',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/halo-wallet/nbdpmlhambbdkhkmbfpljckjcmgibalo',\n      DEFAULT: 'https://halo.social/',\n    },\n    supportedChains: allBlockChains.filter((blockchainMeta) =>\n      HALO_WALLET_SUPPORTED_CHAINS.includes(blockchainMeta.name as Networks)\n    ),\n  };\n};\n", "import { Networks } from '@rango-dev/wallets-shared';\n\nexport function getHaloInstance() {\n  const { kucoin } = window;\n  if (kucoin && kucoin.isKuCoinWallet) {\n    return kucoin;\n  }\n\n  return null;\n}\n\nexport const HALO_WALLET_SUPPORTED_CHAINS = [\n  Networks.ETHEREUM,\n  Networks.POLYGON,\n  Networks.BSC,\n];\n", "import type { SignerFactory } from 'rango-types';\n\nimport { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { getNetworkInstance, Networks } from '@rango-dev/wallets-shared';\nimport { DefaultSignerFactory, TransactionType as TxType } from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  return signers;\n}\n"],
  "mappings": "+EAUA,OACE,yBAAAA,EACA,kBAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,eAAAC,MACK,4BChBP,OAAS,YAAAC,MAAgB,4BAElB,SAASC,GAAkB,CAChC,GAAM,CAAE,OAAAC,CAAO,EAAI,OACnB,OAAIA,GAAUA,EAAO,eACZA,EAGF,IACT,CAPgBC,EAAAF,EAAA,mBAST,IAAMG,EAA+B,CAC1CC,EAAS,SACTA,EAAS,QACTA,EAAS,GACX,ECbA,OAAS,oBAAAC,MAAwB,wBACjC,OAAS,sBAAAC,EAAoB,YAAAC,MAAgB,4BAC7C,OAAS,wBAAAC,EAAsB,mBAAmBC,MAAc,cAEjD,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAcC,EAAmBF,EAAUG,EAAS,QAAQ,EAC5DC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eAAeE,EAAO,IAAK,IAAIC,EAAiBN,CAAW,CAAC,EAC7DG,CACT,CALwBI,EAAAT,EAAA,cFkBxB,IAAMU,EAASC,EAAY,KAEdC,EAAS,CACpB,KAAMF,CACR,EAEaG,EAAcC,EACdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,CAAS,IAAM,CAOtD,GAAM,CAAE,SAAAC,EAAU,QAAAC,CAAQ,EAAI,MAAMC,EAAeH,CAAQ,EAE3D,MAAO,CACL,SAAAC,EACA,QAAAC,CACF,CACF,EAbgC,WAenBE,EAAuBC,EAEvBC,EAA+BC,EAE/BC,EAAuCC,EAEvCC,EAA+CA,EAE/CC,EAAkEZ,EAC7Ea,IAEO,CACL,KAAM,OACN,IAAK,qFACL,MAAO,UACP,YAAa,CACX,OACE,yFACF,MACE,yFACF,QAAS,sBACX,EACA,gBAAiBA,EAAe,OAAQC,GACtCC,EAA6B,SAASD,EAAe,IAAgB,CACvE,CACF,GAjB6E",
  "names": ["canSwitchNetworkToEvm", "getEvmAccounts", "subscribeToEvm", "switchNetworkForEvm", "WalletTypes", "Networks", "getHaloInstance", "kucoin", "__name", "HALO_WALLET_SUPPORTED_CHAINS", "Networks", "DefaultEvmSigner", "getNetworkInstance", "Networks", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "__name", "WALLET", "WalletTypes", "config", "getInstance", "getHaloInstance", "connect", "__name", "instance", "accounts", "chainId", "getEvmAccounts", "subscribe", "subscribeToEvm", "switchNetwork", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "getWalletInfo", "allBlockChains", "blockchainMeta", "HALO_WALLET_SUPPORTED_CHAINS"]
}
