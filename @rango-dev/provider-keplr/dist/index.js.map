{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type { Connect, Subscribe, WalletInfo } from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  getCosmosAccounts,\n  Networks,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { cosmosBlockchains } from 'rango-types';\n\nimport { keplr as keplrInstance } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.KEPLR;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.COSMOS,\n};\n\nexport const getInstance = keplrInstance;\n\nexport const connect: Connect = async ({ instance, network, meta }) => {\n  return await getCosmosAccounts({\n    instance,\n    meta,\n    network,\n  });\n};\n\nexport const subscribe: Subscribe = ({ connect, disconnect }) => {\n  window.addEventListener('keplr_keystorechange', () => {\n    disconnect();\n    connect();\n  });\n};\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const cosmos = cosmosBlockchains(allBlockChains);\n  return {\n    name: 'Keplr',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/keplr/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap',\n      FIREFOX: 'https://addons.mozilla.org/en-US/firefox/addon/keplr',\n      DEFAULT: 'https://www.keplr.app',\n    },\n    color: '#3898e5',\n    supportedChains: cosmos.filter((blockchainMeta) => !!blockchainMeta.info),\n  };\n};\n", "\nexport function keplr() {\n  return window.keplr || null;\n}\n\n\n", "import { DefaultCosmosSigner } from '@rango-dev/signer-cosmos';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const cosmosProvider = getNetworkInstance(provider, Networks.COSMOS);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(\n    TxType.COSMOS,\n    new DefaultCosmosSigner(cosmosProvider)\n  );\n  return signers;\n}\n"],
  "mappings": "+EAGA,OACE,qBAAAA,EACA,YAAAC,EACA,eAAAC,MACK,4BACP,OAAS,qBAAAC,MAAyB,cCP3B,SAASC,GAAQ,CACtB,OAAO,OAAO,OAAS,IACzB,CAFgBC,EAAAD,EAAA,SCDhB,OAAS,uBAAAE,MAA2B,2BACpC,OAAS,YAAAC,EAAU,sBAAAC,MAA0B,4BAC7C,OACE,wBAAAC,EAEA,mBAAmBC,MACd,cAEQ,SAARC,EAA4BC,EAA8B,CAC/D,IAAMC,EAAiBC,EAAmBF,EAAUG,EAAS,MAAM,EAC7DC,EAAU,IAAIC,EACpB,OAAAD,EAAQ,eACNE,EAAO,OACP,IAAIC,EAAoBN,CAAc,CACxC,EACOG,CACT,CARwBI,EAAAT,EAAA,cFKxB,IAAMU,EAASC,EAAY,MAEdC,EAAS,CACpB,KAAMF,EACN,eAAgBG,EAAS,MAC3B,EAEaC,EAAcC,EAEdC,EAAmBC,EAAA,MAAO,CAAE,SAAAC,EAAU,QAAAC,EAAS,KAAAC,CAAK,IACxD,MAAMC,EAAkB,CAC7B,SAAAH,EACA,KAAAE,EACA,QAAAD,CACF,CAAC,EAL6B,WAQnBG,EAAuBL,EAAA,CAAC,CAAE,QAAAD,EAAS,WAAAO,CAAW,IAAM,CAC/D,OAAO,iBAAiB,uBAAwB,IAAM,CACpDA,EAAW,EACXP,EAAQ,CACV,CAAC,CACH,EALoC,aAOvBQ,EAA+CA,EAE/CC,EAAkER,EAC7ES,GACG,CACH,IAAMC,EAASC,EAAkBF,CAAc,EAC/C,MAAO,CACL,KAAM,QACN,IAAK,sFACL,YAAa,CACX,OACE,mFACF,MACE,mFACF,QAAS,uDACT,QAAS,uBACX,EACA,MAAO,UACP,gBAAiBC,EAAO,OAAQE,GAAmB,CAAC,CAACA,EAAe,IAAI,CAC1E,CACF,EAlB+E",
  "names": ["getCosmosAccounts", "Networks", "WalletTypes", "cosmosBlockchains", "keplr", "__name", "DefaultCosmosSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "cosmosProvider", "getNetworkInstance", "Networks", "signers", "DefaultSignerFactory", "TxType", "DefaultCosmosSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "keplr", "connect", "__name", "instance", "network", "meta", "getCosmosAccounts", "subscribe", "disconnect", "getSigners", "getWalletInfo", "allBlockChains", "cosmos", "cosmosBlockchains", "blockchainMeta"]
}
