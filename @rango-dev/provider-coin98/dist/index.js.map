{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts", "../src/solana-signer.ts"],
  "sourcesContent": ["import type {\n  CanSwitchNetwork,\n  Connect,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getBlockChainNameFromId,\n  getEvmAccounts,\n  Networks,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { evmBlockchains, solanaBlockchain } from 'rango-types';\n\nimport { coin98 as coin98_instances, getSolanaAccounts } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.COIN98;\n\nexport const config = {\n  type: WALLET,\n  // TODO: Get from evm networks\n  defaultNetwork: Networks.ETHEREUM,\n};\nexport const getInstance = coin98_instances;\n\nexport const connect: Connect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const sol_instance = chooseInstance(instance, meta, Networks.SOLANA);\n  const evm = await getEvmAccounts(evm_instance);\n  const { accounts: solanaAccounts } = await getSolanaAccounts(sol_instance);\n\n  return [\n    evm,\n    {\n      accounts: solanaAccounts,\n      chainId: Networks.SOLANA,\n    },\n  ];\n};\n\nexport const subscribe: Subscribe = ({\n  instance,\n  meta,\n  updateChainId,\n  connect,\n}) => {\n  const eth = chooseInstance(instance, meta, Networks.ETHEREUM);\n  eth?.on('chainChanged', (chainId: string) => {\n    const network = getBlockChainNameFromId(chainId, meta) || Networks.Unknown;\n    const targetInstance = chooseInstance(instance, meta, network);\n    targetInstance\n      .request({ method: 'eth_requestAccounts' })\n      .then(() => undefined)\n      .catch((err: unknown) => {\n        console.log({ err });\n      });\n    /*\n     *TODO:\n     *We are calling `connect` here because signer can't detect\n     *currect network, I guess the bug is in our signer and it\n     *gets the wrong network by calling a wrong method or something.\n     *Anyways, this works for now, maybe we can reconsider it in future\n     *Whenever we refactored the signer code as well.\n     */\n\n    /*\n     *  we need to update `network` first, if not, it will goes through\n     * the switching network and will open unneccessary pop ups.\n     */\n    updateChainId(chainId);\n    connect(network);\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = async (options) => {\n  const instance = chooseInstance(\n    options.instance,\n    options.meta,\n    options.network\n  );\n  return switchNetworkForEvm({\n    ...options,\n    instance,\n  });\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const solana = solanaBlockchain(allBlockChains);\n  return {\n    name: 'Coin98',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/coin98/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/coin98-wallet/aeachknmefphepccionboohckonoeemg',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/coin98-wallet/aeachknmefphepccionboohckonoeemg',\n      DEFAULT: 'https://coin98.com/wallet',\n    },\n    color: '#1d1c25',\n    supportedChains: [...evms, ...solana],\n  };\n};\n", "import { Networks } from '@rango-dev/wallets-shared';\n\nexport function coin98() {\n  const { coin98, ethereum } = window;\n\n  if (!coin98) return null;\n\n  const instances = new Map();\n\n  // When disabled overring metamask\n  if (coin98.provider) instances.set(Networks.ETHEREUM, coin98.provider);\n  if (ethereum && ethereum.isCoin98) instances.set(Networks.ETHEREUM, ethereum);\n  if (coin98.sol) instances.set(Networks.SOLANA, coin98.sol);\n\n  return instances;\n}\n\n/* \n  This is how coin98 is getting solana accounts.\n  That's the reason we haven't moved it to `shared`\n*/\nexport async function getSolanaAccounts(instance: any) {\n  await instance.enable();\n  const accounts = await instance.request({ method: 'sol_accounts' });\n  return {\n    accounts,\n  };\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\nimport { CustomSolanaSigner } from './solana-signer';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new CustomSolanaSigner(solProvider));\n  return signers;\n}\n", "import { GenericSigner, SignerError, SolanaTransaction } from 'rango-types';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport {\n  SolanaWeb3Signer,\n  generalSolanaTransactionExecutor,\n} from '@rango-dev/signer-solana';\n\n// TODO - replace with real type\n// tslint:disable-next-line: no-any\ntype SolanaExternalProvider = any;\n\nexport class CustomSolanaSigner implements GenericSigner<SolanaTransaction> {\n  private provider: SolanaExternalProvider;\n  constructor(provider: SolanaExternalProvider) {\n    this.provider = provider;\n  }\n\n  async signMessage(): Promise<string> {\n    throw SignerError.UnimplementedError('signMessage');\n  }\n\n  async signAndSendTx(tx: SolanaTransaction): Promise<{ hash: string }> {\n    const DefaultSolanaSigner: SolanaWeb3Signer = async (\n      solanaWeb3Transaction: Transaction | VersionedTransaction\n    ) => {\n      const response: { publicKey: string; signature: string } =\n        await this.provider.request({\n          method: 'sol_sign',\n          params: [solanaWeb3Transaction],\n        });\n      const publicKey = new PublicKey(response.publicKey);\n      const sign = bs58.decode(response.signature);\n\n      solanaWeb3Transaction.addSignature(publicKey, Buffer.from(sign));\n      const raw = solanaWeb3Transaction.serialize();\n      return raw;\n    };\n    const hash = await generalSolanaTransactionExecutor(\n      tx,\n      DefaultSolanaSigner\n    );\n    return { hash };\n  }\n}\n"],
  "mappings": "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",
  "names": ["canSwitchNetworkToEvm", "chooseInstance", "getBlockChainNameFromId", "getEvmAccounts", "Networks", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "solanaBlockchain", "Networks", "coin98", "ethereum", "instances", "Networks", "__name", "getSolanaAccounts", "instance", "DefaultEvmSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "SignerError", "PublicKey", "bs58", "generalSolanaTransactionExecutor", "CustomSolanaSigner", "provider", "SignerError", "tx", "generalSolanaTransactionExecutor", "__name", "solanaWeb3Transaction", "response", "publicKey", "PublicKey", "sign", "bs58", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "CustomSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "coin98", "connect", "__name", "instance", "meta", "evm_instance", "chooseInstance", "sol_instance", "evm", "getEvmAccounts", "solanaAccounts", "getSolanaAccounts", "subscribe", "updateChainId", "chainId", "network", "getBlockChainNameFromId", "err", "switchNetwork", "options", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "solana", "solanaBlockchain"]
}
