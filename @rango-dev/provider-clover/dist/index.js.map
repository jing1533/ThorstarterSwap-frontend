{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts", "../src/signer.ts"],
  "sourcesContent": ["import type {\n  CanEagerConnect,\n  CanSwitchNetwork,\n  Connect,\n  ProviderConnectResult,\n  Subscribe,\n  SwitchNetwork,\n  WalletInfo,\n} from '@rango-dev/wallets-shared';\nimport type { BlockchainMeta, SignerFactory } from 'rango-types';\n\nimport {\n  canEagerlyConnectToEvm,\n  canSwitchNetworkToEvm,\n  chooseInstance,\n  getEvmAccounts,\n  Networks,\n  switchNetworkForEvm,\n  WalletTypes,\n} from '@rango-dev/wallets-shared';\nimport { evmBlockchains, isEvmBlockchain, solanaBlockchain } from 'rango-types';\n\nimport { clover as clover_instance, getNonEvmAccounts } from './helpers';\nimport signer from './signer';\n\nconst WALLET = WalletTypes.CLOVER;\n\nexport const config = {\n  type: WALLET,\n  defaultNetwork: Networks.ETHEREUM,\n};\n\nexport const getInstance = clover_instance;\nexport const connect: Connect = async ({ instance, meta }) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n\n  let results: ProviderConnectResult[] = [];\n\n  if (ethInstance) {\n    const evmResult = await getEvmAccounts(ethInstance);\n    results.push({\n      chainId: evmResult?.chainId,\n      accounts: evmResult?.accounts.length > 0 ? [evmResult.accounts[0]] : [],\n    });\n  }\n\n  const nonEvmResults = await getNonEvmAccounts(instance);\n  results = [...results, ...nonEvmResults];\n\n  return results;\n};\n\nexport const subscribe: Subscribe = ({\n  instance,\n  updateAccounts,\n  state,\n  meta,\n}) => {\n  const ethInstance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  const solanaInstance = chooseInstance(instance, meta, Networks.SOLANA);\n  ethInstance?.on('accountsChanged', async (addresses: string[]) => {\n    if (state.connected) {\n      if (ethInstance) {\n        const eth_chainId = meta\n          .filter(isEvmBlockchain)\n          .find((blockchain) => blockchain.name === Networks.ETHEREUM)?.chainId;\n        updateAccounts(addresses, eth_chainId);\n      }\n      if (solanaInstance) {\n        const solanaAccount = await solanaInstance.getAccount();\n        updateAccounts([solanaAccount], Networks.SOLANA);\n      }\n    }\n  });\n};\n\nexport const switchNetwork: SwitchNetwork = async (options) => {\n  const instance = chooseInstance(\n    options.instance,\n    options.meta,\n    options.network\n  );\n  return switchNetworkForEvm({\n    ...options,\n    instance,\n  });\n};\n\nexport const canSwitchNetworkTo: CanSwitchNetwork = canSwitchNetworkToEvm;\n\nexport const getSigners: (provider: any) => SignerFactory = signer;\n\nexport const canEagerConnect: CanEagerConnect = async ({ instance, meta }) => {\n  const evm_instance = chooseInstance(instance, meta, Networks.ETHEREUM);\n  if (evm_instance) {\n    return canEagerlyConnectToEvm({ instance: evm_instance, meta });\n  }\n  return Promise.resolve(false);\n};\n\nexport const getWalletInfo: (allBlockChains: BlockchainMeta[]) => WalletInfo = (\n  allBlockChains\n) => {\n  const evms = evmBlockchains(allBlockChains);\n  const solana = solanaBlockchain(allBlockChains);\n  return {\n    name: 'Clover',\n    img: 'https://raw.githubusercontent.com/rango-exchange/assets/main/wallets/clover/icon.svg',\n    installLink: {\n      CHROME:\n        'https://chrome.google.com/webstore/detail/clover-wallet/nhnkbkgjikgcigadomkphalanndcapjk',\n      BRAVE:\n        'https://chrome.google.com/webstore/detail/clover-wallet/nhnkbkgjikgcigadomkphalanndcapjk',\n      DEFAULT: 'https://wallet.clover.finance',\n    },\n\n    color: '#96e7ed',\n    supportedChains: [...evms, ...solana],\n  };\n};\n", "import {\n  Network,\n  Networks,\n  ProviderConnectResult,\n} from '@rango-dev/wallets-shared';\n\nexport function clover() {\n  const { clover, clover_solana } = window;\n\n  if (!clover) return null;\n\n  const instances = new Map();\n  if (clover) instances.set(Networks.ETHEREUM, clover);\n  if (clover_solana) instances.set(Networks.SOLANA, clover_solana);\n\n  return instances;\n}\n\ntype Provider = Map<Network, any>;\n\nexport async function getNonEvmAccounts(\n  instances: Provider\n): Promise<ProviderConnectResult[]> {\n  const solanaInstance = instances.get(Networks.SOLANA);\n  const results: ProviderConnectResult[] = [];\n\n  if (solanaInstance) {\n    const solanaAccounts = await solanaInstance.getAccount();\n\n    results.push({\n      accounts: [solanaAccounts],\n      chainId: Networks.SOLANA,\n    });\n  }\n\n  return results;\n}\n", "import { DefaultEvmSigner } from '@rango-dev/signer-evm';\nimport { DefaultSolanaSigner } from '@rango-dev/signer-solana';\nimport { Networks, getNetworkInstance } from '@rango-dev/wallets-shared';\nimport {\n  DefaultSignerFactory,\n  SignerFactory,\n  TransactionType as TxType,\n} from 'rango-types';\n\nexport default function getSigners(provider: any): SignerFactory {\n  const ethProvider = getNetworkInstance(provider, Networks.ETHEREUM);\n  const solProvider = getNetworkInstance(provider, Networks.SOLANA);\n  const signers = new DefaultSignerFactory();\n  signers.registerSigner(TxType.EVM, new DefaultEvmSigner(ethProvider));\n  signers.registerSigner(TxType.SOLANA, new DefaultSolanaSigner(solProvider));\n  return signers;\n}\n"],
  "mappings": "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",
  "names": ["canEagerlyConnectToEvm", "canSwitchNetworkToEvm", "chooseInstance", "getEvmAccounts", "Networks", "switchNetworkForEvm", "WalletTypes", "evmBlockchains", "isEvmBlockchain", "solanaBlockchain", "Networks", "clover", "clover_solana", "instances", "Networks", "__name", "getNonEvmAccounts", "solanaInstance", "results", "solanaAccounts", "DefaultEvmSigner", "DefaultSolanaSigner", "Networks", "getNetworkInstance", "DefaultSignerFactory", "TxType", "getSigners", "provider", "ethProvider", "getNetworkInstance", "Networks", "solProvider", "signers", "DefaultSignerFactory", "TxType", "DefaultEvmSigner", "DefaultSolanaSigner", "__name", "WALLET", "WalletTypes", "config", "Networks", "getInstance", "clover", "connect", "__name", "instance", "meta", "ethInstance", "chooseInstance", "results", "evmResult", "getEvmAccounts", "nonEvmResults", "getNonEvmAccounts", "subscribe", "updateAccounts", "state", "solanaInstance", "addresses", "eth_chainId", "isEvmBlockchain", "blockchain", "solanaAccount", "switchNetwork", "options", "switchNetworkForEvm", "canSwitchNetworkTo", "canSwitchNetworkToEvm", "getSigners", "canEagerConnect", "evm_instance", "canEagerlyConnectToEvm", "getWalletInfo", "allBlockChains", "evms", "evmBlockchains", "solana", "solanaBlockchain"]
}
